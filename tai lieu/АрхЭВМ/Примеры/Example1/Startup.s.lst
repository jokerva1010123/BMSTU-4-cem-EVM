


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* LPC2400.S: Startup file for Philips LPC2400 device s
                       eries                 */
    3 00000000         ;/******************************************************
                       ***********************/
    4 00000000         ;/* <<< Use Configuration Wizard in Context Menu >>>    
                                             */
    5 00000000         ;/******************************************************
                       ***********************/
    6 00000000         ;/* This file is part of the uVision/ARM development too
                       ls.                   */
    7 00000000         ;/* Copyright (c) 2007-2008 Keil - An ARM Company. All r
                       ights reserved.       */
    8 00000000         ;/* This software may only be used under the terms of a 
                       valid, current,       */
    9 00000000         ;/* end user licence from KEIL for a compatible version 
                       of KEIL software      */
   10 00000000         ;/* development tools. Nothing else gives you the right 
                       to use this software. */
   11 00000000         ;/******************************************************
                       ***********************/
   12 00000000         
   13 00000000         ;/*
   14 00000000         ; *  The LPC2400.S code is executed after CPU Reset. Thi
                       s file may be 
   15 00000000         ; *  translated with the following SET symbols. In uVisi
                       on these SET 
   16 00000000         ; *  symbols are entered under Options - ASM - Define.
   17 00000000         ; *
   18 00000000         ; *  NO_CLOCK_SETUP: when set the startup code will not 
                       initialize Clock 
   19 00000000         ; *  (used mostly when clock is already initialized from
                        script .ini 
   20 00000000         ; *  file).
   21 00000000         ; *
   22 00000000         ; *  NO_EMC_SETUP: when set the startup code will not in
                       itialize 
   23 00000000         ; *  External Bus Controller.
   24 00000000         ; *
   25 00000000         ; *  RAM_INTVEC: when set the startup code copies except
                       ion vectors 
   26 00000000         ; *  from on-chip Flash to on-chip RAM.
   27 00000000         ; *
   28 00000000         ; *  REMAP: when set the startup code initializes the re
                       gister MEMMAP 
   29 00000000         ; *  which overwrites the settings of the CPU configurat
                       ion pins. The 
   30 00000000         ; *  startup and interrupt vectors are remapped from:
   31 00000000         ; *     0x00000000  default setting (not remapped)
   32 00000000         ; *     0x40000000  when RAM_MODE is used
   33 00000000         ; *     0x80000000  when EXTMEM_MODE is used
   34 00000000         ; *
   35 00000000         ; *  EXTMEM_MODE: when set the device is configured for 
                       code execution
   36 00000000         ; *  from external memory starting at address 0x80000000
                       .
   37 00000000         ; *
   38 00000000         ; *  RAM_MODE: when set the device is configured for cod



ARM Macro Assembler    Page 2 


                       e execution
   39 00000000         ; *  from on-chip RAM starting at address 0x40000000. 
   40 00000000         ; */
   41 00000000         
   42 00000000         
   43 00000000         ; Standard definitions of Mode bits and Interrupt (I & F
                       ) flags in PSRs
   44 00000000         
   45 00000000 00000010 
                       Mode_USR
                               EQU              0x10
   46 00000000 00000011 
                       Mode_FIQ
                               EQU              0x11
   47 00000000 00000012 
                       Mode_IRQ
                               EQU              0x12
   48 00000000 00000013 
                       Mode_SVC
                               EQU              0x13
   49 00000000 00000017 
                       Mode_ABT
                               EQU              0x17
   50 00000000 0000001B 
                       Mode_UND
                               EQU              0x1B
   51 00000000 0000001F 
                       Mode_SYS
                               EQU              0x1F
   52 00000000         
   53 00000000 00000080 
                       I_Bit   EQU              0x80        ; when I bit is set
                                                            , IRQ is disabled
   54 00000000 00000040 
                       F_Bit   EQU              0x40        ; when F bit is set
                                                            , FIQ is disabled
   55 00000000         
   56 00000000         
   57 00000000         ;----------------------- Memory Definitions ------------
                       ------------------------
   58 00000000         
   59 00000000         ; Internal Memory Base Addresses
   60 00000000 00000000 
                       FLASH_BASE
                               EQU              0x00000000
   61 00000000 40000000 
                       RAM_BASE
                               EQU              0x40000000
   62 00000000 80000000 
                       EXTMEM_BASE
                               EQU              0x80000000
   63 00000000         
   64 00000000         ; External Memory Base Addresses
   65 00000000 80000000 
                       STA_MEM0_BASE
                               EQU              0x80000000
   66 00000000 81000000 
                       STA_MEM1_BASE
                               EQU              0x81000000



ARM Macro Assembler    Page 3 


   67 00000000 82000000 
                       STA_MEM2_BASE
                               EQU              0x82000000
   68 00000000 83000000 
                       STA_MEM3_BASE
                               EQU              0x83000000
   69 00000000 A0000000 
                       DYN_MEM0_BASE
                               EQU              0xA0000000
   70 00000000 B0000000 
                       DYN_MEM1_BASE
                               EQU              0xB0000000
   71 00000000 C0000000 
                       DYN_MEM2_BASE
                               EQU              0xC0000000
   72 00000000 D0000000 
                       DYN_MEM3_BASE
                               EQU              0xD0000000
   73 00000000         
   74 00000000         
   75 00000000         ;----------------------- Stack and Heap Definitions ----
                       ------------------------
   76 00000000         
   77 00000000         ;// <h> Stack Configuration (Stack Sizes in Bytes)
   78 00000000         ;//   <o0> Undefined Mode      <0x0-0xFFFFFFFF:8>
   79 00000000         ;//   <o1> Supervisor Mode     <0x0-0xFFFFFFFF:8>
   80 00000000         ;//   <o2> Abort Mode          <0x0-0xFFFFFFFF:8>
   81 00000000         ;//   <o3> Fast Interrupt Mode <0x0-0xFFFFFFFF:8>
   82 00000000         ;//   <o4> Interrupt Mode      <0x0-0xFFFFFFFF:8>
   83 00000000         ;//   <o5> User/System Mode    <0x0-0xFFFFFFFF:8>
   84 00000000         ;// </h>
   85 00000000         
   86 00000000 00000000 
                       UND_Stack_Size
                               EQU              0x00000000
   87 00000000 00000008 
                       SVC_Stack_Size
                               EQU              0x00000008
   88 00000000 00000000 
                       ABT_Stack_Size
                               EQU              0x00000000
   89 00000000 00000000 
                       FIQ_Stack_Size
                               EQU              0x00000000
   90 00000000 00000100 
                       IRQ_Stack_Size
                               EQU              0x00000100
   91 00000000 00000400 
                       USR_Stack_Size
                               EQU              0x00000400
   92 00000000         
   94 00000000 00000108 
                       ISR_Stack_Size
                               EQU              (UND_Stack_Size + SVC_Stack_Siz
e + ABT_Stack_Size +                           FIQ_Stack_Size + IRQ_Stack_Size
)
   95 00000000         
   96 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3



ARM Macro Assembler    Page 4 


   97 00000000         
   98 00000000         Stack_Mem
                               SPACE            USR_Stack_Size
   99 00000400         __initial_sp
                               SPACE            ISR_Stack_Size
  100 00000508         
  101 00000508         Stack_Top
  102 00000508         
  103 00000508         
  104 00000508         ;// <h> Heap Configuration
  105 00000508         ;//   <o>  Heap Size (in Bytes) <0x0-0xFFFFFFFF>
  106 00000508         ;// </h>
  107 00000508         
  108 00000508 00000100 
                       Heap_Size
                               EQU              0x00000100
  109 00000508         
  110 00000508                 AREA             HEAP, NOINIT, READWRITE, ALIGN=
3
  111 00000000         __heap_base
  112 00000000         Heap_Mem
                               SPACE            Heap_Size
  113 00000100         __heap_limit
  114 00000100         
  115 00000100         
  116 00000100         ;----------------------- Clock Definitions -------------
                       ------------------------
  117 00000100         
  118 00000100         ; System Control Block (SCB) Module Definitions
  119 00000100 E01FC000 
                       SCB_BASE
                               EQU              0xE01FC000  ; SCB Base Address
  120 00000100 00000080 
                       PLLCON_OFS
                               EQU              0x80        ; PLL Control Offse
                                                            t
  121 00000100 00000084 
                       PLLCFG_OFS
                               EQU              0x84        ; PLL Configuration
                                                             Offset
  122 00000100 00000088 
                       PLLSTAT_OFS
                               EQU              0x88        ; PLL Status Offset
                                                            
  123 00000100 0000008C 
                       PLLFEED_OFS
                               EQU              0x8C        ; PLL Feed Offset
  124 00000100 00000104 
                       CCLKCFG_OFS
                               EQU              0x104       ; CPU Clock Divider
                                                             Reg Offset
  125 00000100 00000108 
                       USBCLKCFG_OFS
                               EQU              0x108       ; USB Clock Divider
                                                             Reg Offset
  126 00000100 0000010C 
                       CLKSRCSEL_OFS
                               EQU              0x10C       ; Clock Source Sel 
                                                            Reg Offset



ARM Macro Assembler    Page 5 


  127 00000100 000001A0 
                       SCS_OFS EQU              0x1A0       ; Sys Control and S
                                                            tatus Reg Offset
  128 00000100 000001A8 
                       PCLKSEL0_OFS
                               EQU              0x1A8       ; Periph Clock Sel 
                                                            Reg 0 Offset
  129 00000100 000001AC 
                       PCLKSEL1_OFS
                               EQU              0x1AC       ; Periph Clock Sel 
                                                            Reg 0 Offset
  130 00000100         
  131 00000100 000000C0 
                       PCON_OFS
                               EQU              0x0C0       ; Power Mode Contro
                                                            l Reg Offset
  132 00000100 000000C4 
                       PCONP_OFS
                               EQU              0x0C4       ; Power Control for
                                                             Periphs Reg Offset
                                                            
  133 00000100         
  134 00000100         ; Constants
  135 00000100 00000010 
                       OSCRANGE
                               EQU              (1<<4)      ; Oscillator Range 
                                                            Select
  136 00000100 00000020 
                       OSCEN   EQU              (1<<5)      ; Main oscillator E
                                                            nable
  137 00000100 00000040 
                       OSCSTAT EQU              (1<<6)      ; Main Oscillator S
                                                            tatus
  138 00000100 00000001 
                       PLLCON_PLLE
                               EQU              (1<<0)      ; PLL Enable
  139 00000100 00000002 
                       PLLCON_PLLC
                               EQU              (1<<1)      ; PLL Connect
  140 00000100 00007FFF 
                       PLLSTAT_M
                               EQU              (0x7FFF<<0) ; PLL M Value
  141 00000100 00FF0000 
                       PLLSTAT_N
                               EQU              (0xFF<<16)  ; PLL N Value
  142 00000100 04000000 
                       PLLSTAT_PLOCK
                               EQU              (1<<26)     ; PLL Lock Status
  143 00000100         
  144 00000100         ;// <e> Clock Setup
  145 00000100         ;//   <h> System Controls and Status Register (SYS)
  146 00000100         ;//     <o1.4>    OSCRANGE: Main Oscillator Range Select
                       
  147 00000100         ;//                     <0=>  1 MHz to 20 MHz
  148 00000100         ;//                     <1=> 15 MHz to 24 MHz
  149 00000100         ;//     <e1.5>       OSCEN: Main Oscillator Enable
  150 00000100         ;//     </e>
  151 00000100         ;//   </h>
  152 00000100         ;//



ARM Macro Assembler    Page 6 


  153 00000100         ;//   <h> PLL Clock Source Select Register (CLKSRCSEL)
  154 00000100         ;//     <o2.0..1>   CLKSRC: PLL Clock Source Selection
  155 00000100         ;//                     <0=> Internal RC oscillator
  156 00000100         ;//                     <1=> Main oscillator
  157 00000100         ;//                     <2=> RTC oscillator
  158 00000100         ;//   </h>
  159 00000100         ;//
  160 00000100         ;//   <h> PLL Configuration Register (PLLCFG)
  161 00000100         ;//                     <i> PLL_clk = (2* M * PLL_clk_sr
                       c) / N
  162 00000100         ;//     <o3.0..14>    MSEL: PLL Multiplier Selection
  163 00000100         ;//                     <1-32768><#-1>
  164 00000100         ;//                     <i> M Value
  165 00000100         ;//     <o3.16..23>   NSEL: PLL Divider Selection
  166 00000100         ;//                     <1-256><#-1>
  167 00000100         ;//                     <i> N Value
  168 00000100         ;//   </h>
  169 00000100         ;//
  170 00000100         ;//   <h> CPU Clock Configuration Register (CCLKCFG)
  171 00000100         ;//     <o4.0..7>  CCLKSEL: Divide Value for CPU Clock f
                       rom PLL
  172 00000100         ;//                     <2-256:2><#-1>
  173 00000100         ;//   </h>
  174 00000100         ;//
  175 00000100         ;//   <h> USB Clock Configuration Register (USBCLKCFG)
  176 00000100         ;//     <o5.0..3>   USBSEL: Divide Value for USB Clock f
                       rom PLL
  177 00000100         ;//                     <1-16><#-1>
  178 00000100         ;//   </h>
  179 00000100         ;//
  180 00000100         ;//   <h> Peripheral Clock Selection Register 0 (PCLKSEL
                       0)
  181 00000100         ;//     <o6.0..1>      PCLK_WDT: Peripheral Clock Select
                       ion for WDT
  182 00000100         ;//                     <0=> Pclk = Cclk / 4
  183 00000100         ;//                     <1=> Pclk = Cclk
  184 00000100         ;//                     <2=> Pclk = Cclk / 2
  185 00000100         ;//                     <3=> Pclk = Cclk / 8
  186 00000100         ;//     <o6.2..3>   PCLK_TIMER0: Peripheral Clock Select
                       ion for TIMER0
  187 00000100         ;//                     <0=> Pclk = Cclk / 4
  188 00000100         ;//                     <1=> Pclk = Cclk
  189 00000100         ;//                     <2=> Pclk = Cclk / 2
  190 00000100         ;//                     <3=> Pclk = Cclk / 8
  191 00000100         ;//     <o6.4..5>   PCLK_TIMER1: Peripheral Clock Select
                       ion for TIMER1
  192 00000100         ;//                     <0=> Pclk = Cclk / 4
  193 00000100         ;//                     <1=> Pclk = Cclk
  194 00000100         ;//                     <2=> Pclk = Cclk / 2
  195 00000100         ;//                     <3=> Pclk = Cclk / 8
  196 00000100         ;//     <o6.6..7>    PCLK_UART0: Peripheral Clock Select
                       ion for UART0
  197 00000100         ;//                     <0=> Pclk = Cclk / 4
  198 00000100         ;//                     <1=> Pclk = Cclk
  199 00000100         ;//                     <2=> Pclk = Cclk / 2
  200 00000100         ;//                     <3=> Pclk = Cclk / 8
  201 00000100         ;//     <o6.8..9>    PCLK_UART1: Peripheral Clock Select
                       ion for UART1
  202 00000100         ;//                     <0=> Pclk = Cclk / 4



ARM Macro Assembler    Page 7 


  203 00000100         ;//                     <1=> Pclk = Cclk
  204 00000100         ;//                     <2=> Pclk = Cclk / 2
  205 00000100         ;//                     <3=> Pclk = Cclk / 8
  206 00000100         ;//     <o6.10..11>   PCLK_PWM0: Peripheral Clock Select
                       ion for PWM0
  207 00000100         ;//                     <0=> Pclk = Cclk / 4
  208 00000100         ;//                     <1=> Pclk = Cclk
  209 00000100         ;//                     <2=> Pclk = Cclk / 2
  210 00000100         ;//                     <3=> Pclk = Cclk / 8
  211 00000100         ;//     <o6.12..13>   PCLK_PWM1: Peripheral Clock Select
                       ion for PWM1
  212 00000100         ;//                     <0=> Pclk = Cclk / 4
  213 00000100         ;//                     <1=> Pclk = Cclk
  214 00000100         ;//                     <2=> Pclk = Cclk / 2
  215 00000100         ;//                     <3=> Pclk = Cclk / 8
  216 00000100         ;//     <o6.14..15>   PCLK_I2C0: Peripheral Clock Select
                       ion for I2C0
  217 00000100         ;//                     <0=> Pclk = Cclk / 4
  218 00000100         ;//                     <1=> Pclk = Cclk
  219 00000100         ;//                     <2=> Pclk = Cclk / 2
  220 00000100         ;//                     <3=> Pclk = Cclk / 8
  221 00000100         ;//     <o6.16..17>    PCLK_SPI: Peripheral Clock Select
                       ion for SPI
  222 00000100         ;//                     <0=> Pclk = Cclk / 4
  223 00000100         ;//                     <1=> Pclk = Cclk
  224 00000100         ;//                     <2=> Pclk = Cclk / 2
  225 00000100         ;//                     <3=> Pclk = Cclk / 8
  226 00000100         ;//     <o6.18..19>    PCLK_RTC: Peripheral Clock Select
                       ion for RTC
  227 00000100         ;//                     <0=> Pclk = Cclk / 4
  228 00000100         ;//                     <1=> Pclk = Cclk
  229 00000100         ;//                     <2=> Pclk = Cclk / 2
  230 00000100         ;//                     <3=> Pclk = Cclk / 8
  231 00000100         ;//     <o6.20..21>   PCLK_SSP1: Peripheral Clock Select
                       ion for SSP1
  232 00000100         ;//                     <0=> Pclk = Cclk / 4
  233 00000100         ;//                     <1=> Pclk = Cclk
  234 00000100         ;//                     <2=> Pclk = Cclk / 2
  235 00000100         ;//                     <3=> Pclk = Cclk / 8
  236 00000100         ;//     <o6.22..23>    PCLK_DAC: Peripheral Clock Select
                       ion for DAC
  237 00000100         ;//                     <0=> Pclk = Cclk / 4
  238 00000100         ;//                     <1=> Pclk = Cclk
  239 00000100         ;//                     <2=> Pclk = Cclk / 2
  240 00000100         ;//                     <3=> Pclk = Cclk / 8
  241 00000100         ;//     <o6.24..25>    PCLK_ADC: Peripheral Clock Select
                       ion for ADC
  242 00000100         ;//                     <0=> Pclk = Cclk / 4
  243 00000100         ;//                     <1=> Pclk = Cclk
  244 00000100         ;//                     <2=> Pclk = Cclk / 2
  245 00000100         ;//                     <3=> Pclk = Cclk / 8
  246 00000100         ;//     <o6.26..27>   PCLK_CAN1: Peripheral Clock Select
                       ion for CAN1
  247 00000100         ;//                     <0=> Pclk = Cclk / 4
  248 00000100         ;//                     <1=> Pclk = Cclk
  249 00000100         ;//                     <2=> Pclk = Cclk / 2
  250 00000100         ;//                     <3=> Pclk = Cclk / 6
  251 00000100         ;//     <o6.28..29>   PCLK_CAN2: Peripheral Clock Select
                       ion for CAN2



ARM Macro Assembler    Page 8 


  252 00000100         ;//                     <0=> Pclk = Cclk / 4
  253 00000100         ;//                     <1=> Pclk = Cclk
  254 00000100         ;//                     <2=> Pclk = Cclk / 2
  255 00000100         ;//                     <3=> Pclk = Cclk / 6
  256 00000100         ;//     <o6.30..31>    PCLK_ACF: Peripheral Clock Select
                       ion for ACF
  257 00000100         ;//                     <0=> Pclk = Cclk / 4
  258 00000100         ;//                     <1=> Pclk = Cclk
  259 00000100         ;//                     <2=> Pclk = Cclk / 2
  260 00000100         ;//                     <3=> Pclk = Cclk / 6
  261 00000100         ;//   </h>
  262 00000100         ;//
  263 00000100         ;//   <h> Peripheral Clock Selection Register 1 (PCLKSEL
                       1)
  264 00000100         ;//     <o7.0..1>  PCLK_BAT_RAM: Peripheral Clock Select
                       ion for the Battery Supported RAM
  265 00000100         ;//                     <0=> Pclk = Cclk / 4
  266 00000100         ;//                     <1=> Pclk = Cclk
  267 00000100         ;//                     <2=> Pclk = Cclk / 2
  268 00000100         ;//                     <3=> Pclk = Cclk / 8
  269 00000100         ;//     <o7.2..3>     PCLK_GPIO: Peripheral Clock Select
                       ion for GPIOs
  270 00000100         ;//                     <0=> Pclk = Cclk / 4
  271 00000100         ;//                     <1=> Pclk = Cclk
  272 00000100         ;//                     <2=> Pclk = Cclk / 2
  273 00000100         ;//                     <3=> Pclk = Cclk / 8
  274 00000100         ;//     <o7.4..5>      PCLK_PCB: Peripheral Clock Select
                       ion for Pin Connect Block
  275 00000100         ;//                     <0=> Pclk = Cclk / 4
  276 00000100         ;//                     <1=> Pclk = Cclk
  277 00000100         ;//                     <2=> Pclk = Cclk / 2
  278 00000100         ;//                     <3=> Pclk = Cclk / 8
  279 00000100         ;//     <o7.6..7>     PCLK_I2C1: Peripheral Clock Select
                       ion for I2C1
  280 00000100         ;//                     <0=> Pclk = Cclk / 4
  281 00000100         ;//                     <1=> Pclk = Cclk
  282 00000100         ;//                     <2=> Pclk = Cclk / 2
  283 00000100         ;//                     <3=> Pclk = Cclk / 8
  284 00000100         ;//     <o7.10..11>   PCLK_SSP0: Peripheral Clock Select
                       ion for SSP0
  285 00000100         ;//                     <0=> Pclk = Cclk / 4
  286 00000100         ;//                     <1=> Pclk = Cclk
  287 00000100         ;//                     <2=> Pclk = Cclk / 2
  288 00000100         ;//                     <3=> Pclk = Cclk / 8
  289 00000100         ;//     <o7.12..13> PCLK_TIMER2: Peripheral Clock Select
                       ion for TIMER2
  290 00000100         ;//                     <0=> Pclk = Cclk / 4
  291 00000100         ;//                     <1=> Pclk = Cclk
  292 00000100         ;//                     <2=> Pclk = Cclk / 2
  293 00000100         ;//                     <3=> Pclk = Cclk / 8
  294 00000100         ;//     <o7.14..15> PCLK_TIMER3: Peripheral Clock Select
                       ion for TIMER3
  295 00000100         ;//                     <0=> Pclk = Cclk / 4
  296 00000100         ;//                     <1=> Pclk = Cclk
  297 00000100         ;//                     <2=> Pclk = Cclk / 2
  298 00000100         ;//                     <3=> Pclk = Cclk / 8
  299 00000100         ;//     <o7.16..17>  PCLK_UART2: Peripheral Clock Select
                       ion for UART2
  300 00000100         ;//                     <0=> Pclk = Cclk / 4



ARM Macro Assembler    Page 9 


  301 00000100         ;//                     <1=> Pclk = Cclk
  302 00000100         ;//                     <2=> Pclk = Cclk / 2
  303 00000100         ;//                     <3=> Pclk = Cclk / 8
  304 00000100         ;//     <o7.18..19>  PCLK_UART3: Peripheral Clock Select
                       ion for UART3
  305 00000100         ;//                     <0=> Pclk = Cclk / 4
  306 00000100         ;//                     <1=> Pclk = Cclk
  307 00000100         ;//                     <2=> Pclk = Cclk / 2
  308 00000100         ;//                     <3=> Pclk = Cclk / 8
  309 00000100         ;//     <o7.20..21>   PCLK_I2C2: Peripheral Clock Select
                       ion for I2C2
  310 00000100         ;//                     <0=> Pclk = Cclk / 4
  311 00000100         ;//                     <1=> Pclk = Cclk
  312 00000100         ;//                     <2=> Pclk = Cclk / 2
  313 00000100         ;//                     <3=> Pclk = Cclk / 8
  314 00000100         ;//     <o7.22..23>    PCLK_I2S: Peripheral Clock Select
                       ion for I2S
  315 00000100         ;//                     <0=> Pclk = Cclk / 4
  316 00000100         ;//                     <1=> Pclk = Cclk
  317 00000100         ;//                     <2=> Pclk = Cclk / 2
  318 00000100         ;//                     <3=> Pclk = Cclk / 8
  319 00000100         ;//     <o7.24..25>    PCLK_MCI: Peripheral Clock Select
                       ion for MCI
  320 00000100         ;//                     <0=> Pclk = Cclk / 4
  321 00000100         ;//                     <1=> Pclk = Cclk
  322 00000100         ;//                     <2=> Pclk = Cclk / 2
  323 00000100         ;//                     <3=> Pclk = Cclk / 8
  324 00000100         ;//     <o7.28..29> PCLK_SYSCON: Peripheral Clock Select
                       ion for System Control Block
  325 00000100         ;//                     <0=> Pclk = Cclk / 4
  326 00000100         ;//                     <1=> Pclk = Cclk
  327 00000100         ;//                     <2=> Pclk = Cclk / 2
  328 00000100         ;//                     <3=> Pclk = Cclk / 8
  329 00000100         ;//   </h>
  330 00000100         ;// </e>
  331 00000100 00000001 
                       CLOCK_SETUP
                               EQU              1
  332 00000100 00000000 
                       SCS_Val EQU              0x00000000
  333 00000100 00000000 
                       CLKSRCSEL_Val
                               EQU              0x00000000
  334 00000100 0000002F 
                       PLLCFG_Val
                               EQU              0x0000002F
  335 00000100 00000005 
                       CCLKCFG_Val
                               EQU              0x00000005
  336 00000100 00000005 
                       USBCLKCFG_Val
                               EQU              0x00000005
  337 00000100 00000000 
                       PCLKSEL0_Val
                               EQU              0x00000000
  338 00000100 00000000 
                       PCLKSEL1_Val
                               EQU              0x00000000
  339 00000100         



ARM Macro Assembler    Page 10 


  340 00000100         
  341 00000100         ;----------------------- Memory Accelerator Module (MAM)
                        Definitions -----------
  342 00000100         
  343 00000100 E01FC000 
                       MAM_BASE
                               EQU              0xE01FC000  ; MAM Base Address
  344 00000100 00000000 
                       MAMCR_OFS
                               EQU              0x00        ; MAM Control Offse
                                                            t
  345 00000100 00000004 
                       MAMTIM_OFS
                               EQU              0x04        ; MAM Timing Offset
                                                            
  346 00000100         
  347 00000100         ;// <e> MAM Setup
  348 00000100         ;//   <o1.0..1>   MAM Control
  349 00000100         ;//               <0=> Disabled
  350 00000100         ;//               <1=> Partially Enabled
  351 00000100         ;//               <2=> Fully Enabled
  352 00000100         ;//               <i> Mode
  353 00000100         ;//   <o2.0..2>   MAM Timing
  354 00000100         ;//               <0=> Reserved  <1=> 1   <2=> 2   <3=> 
                       3
  355 00000100         ;//               <4=> 4         <5=> 5   <6=> 6   <7=> 
                       7
  356 00000100         ;//               <i> Fetch Cycles
  357 00000100         ;// </e>
  358 00000100 00000001 
                       MAM_SETUP
                               EQU              1
  359 00000100 00000002 
                       MAMCR_Val
                               EQU              0x00000002
  360 00000100 00000004 
                       MAMTIM_Val
                               EQU              0x00000004
  361 00000100         
  362 00000100         
  363 00000100         ;----------------------- Pin Connect Block Definitions -
                       ------------------------
  364 00000100         
  365 00000100 E002C000 
                       PCB_BASE
                               EQU              0xE002C000  ; PCB Base Address
  366 00000100 00000000 
                       PINSEL0_OFS
                               EQU              0x00        ; PINSEL0  Address 
                                                            Offset
  367 00000100 00000004 
                       PINSEL1_OFS
                               EQU              0x04        ; PINSEL1  Address 
                                                            Offset
  368 00000100 00000008 
                       PINSEL2_OFS
                               EQU              0x08        ; PINSEL2  Address 
                                                            Offset
  369 00000100 0000000C 



ARM Macro Assembler    Page 11 


                       PINSEL3_OFS
                               EQU              0x0C        ; PINSEL3  Address 
                                                            Offset
  370 00000100 00000010 
                       PINSEL4_OFS
                               EQU              0x10        ; PINSEL4  Address 
                                                            Offset
  371 00000100 00000014 
                       PINSEL5_OFS
                               EQU              0x14        ; PINSEL5  Address 
                                                            Offset
  372 00000100 00000018 
                       PINSEL6_OFS
                               EQU              0x18        ; PINSEL6  Address 
                                                            Offset
  373 00000100 0000001C 
                       PINSEL7_OFS
                               EQU              0x1C        ; PINSEL7  Address 
                                                            Offset
  374 00000100 00000020 
                       PINSEL8_OFS
                               EQU              0x20        ; PINSEL8  Address 
                                                            Offset
  375 00000100 00000024 
                       PINSEL9_OFS
                               EQU              0x24        ; PINSEL9  Address 
                                                            Offset
  376 00000100 00000028 
                       PINSEL10_OFS
                               EQU              0x28        ; PINSEL10 Address 
                                                            Offset
  377 00000100         
  378 00000100         
  379 00000100         ;----------------------- External Memory Controller (EMC
                       ) Definitons -----------
  380 00000100         
  381 00000100 FFE08000 
                       EMC_BASE
                               EQU              0xFFE08000  ; EMC Base Address
  382 00000100         
  383 00000100 00000000 
                       EMC_CTRL_OFS
                               EQU              0x000
  384 00000100 00000004 
                       EMC_STAT_OFS
                               EQU              0x004
  385 00000100 00000008 
                       EMC_CONFIG_OFS
                               EQU              0x008
  386 00000100 00000020 
                       EMC_DYN_CTRL_OFS
                               EQU              0x020
  387 00000100 00000024 
                       EMC_DYN_RFSH_OFS
                               EQU              0x024
  388 00000100 00000028 
                       EMC_DYN_RD_CFG_OFS
                               EQU              0x028
  389 00000100 00000030 



ARM Macro Assembler    Page 12 


                       EMC_DYN_RP_OFS
                               EQU              0x030
  390 00000100 00000034 
                       EMC_DYN_RAS_OFS
                               EQU              0x034
  391 00000100 00000038 
                       EMC_DYN_SREX_OFS
                               EQU              0x038
  392 00000100 0000003C 
                       EMC_DYN_APR_OFS
                               EQU              0x03C
  393 00000100 00000040 
                       EMC_DYN_DAL_OFS
                               EQU              0x040
  394 00000100 00000044 
                       EMC_DYN_WR_OFS
                               EQU              0x044
  395 00000100 00000048 
                       EMC_DYN_RC_OFS
                               EQU              0x048
  396 00000100 0000004C 
                       EMC_DYN_RFC_OFS
                               EQU              0x04C
  397 00000100 00000050 
                       EMC_DYN_XSR_OFS
                               EQU              0x050
  398 00000100 00000054 
                       EMC_DYN_RRD_OFS
                               EQU              0x054
  399 00000100 00000058 
                       EMC_DYN_MRD_OFS
                               EQU              0x058
  400 00000100 00000100 
                       EMC_DYN_CFG0_OFS
                               EQU              0x100
  401 00000100 00000104 
                       EMC_DYN_RASCAS0_OFS
                               EQU              0x104
  402 00000100 00000140 
                       EMC_DYN_CFG1_OFS
                               EQU              0x140
  403 00000100 00000144 
                       EMC_DYN_RASCAS1_OFS
                               EQU              0x144
  404 00000100 00000160 
                       EMC_DYN_CFG2_OFS
                               EQU              0x160
  405 00000100 00000164 
                       EMC_DYN_RASCAS2_OFS
                               EQU              0x164
  406 00000100 00000180 
                       EMC_DYN_CFG3_OFS
                               EQU              0x180
  407 00000100 00000184 
                       EMC_DYN_RASCAS3_OFS
                               EQU              0x184
  408 00000100 00000200 
                       EMC_STA_CFG0_OFS
                               EQU              0x200



ARM Macro Assembler    Page 13 


  409 00000100 00000204 
                       EMC_STA_WWEN0_OFS
                               EQU              0x204
  410 00000100 00000208 
                       EMC_STA_WOEN0_OFS
                               EQU              0x208
  411 00000100 0000020C 
                       EMC_STA_WRD0_OFS
                               EQU              0x20C
  412 00000100 00000210 
                       EMC_STA_WPAGE0_OFS
                               EQU              0x210
  413 00000100 00000214 
                       EMC_STA_WWR0_OFS
                               EQU              0x214
  414 00000100 00000218 
                       EMC_STA_WTURN0_OFS
                               EQU              0x218
  415 00000100 00000220 
                       EMC_STA_CFG1_OFS
                               EQU              0x220
  416 00000100 00000224 
                       EMC_STA_WWEN1_OFS
                               EQU              0x224
  417 00000100 00000228 
                       EMC_STA_WOEN1_OFS
                               EQU              0x228
  418 00000100 0000022C 
                       EMC_STA_WRD1_OFS
                               EQU              0x22C
  419 00000100 00000230 
                       EMC_STA_WPAGE1_OFS
                               EQU              0x230
  420 00000100 00000234 
                       EMC_STA_WWR1_OFS
                               EQU              0x234
  421 00000100 00000238 
                       EMC_STA_WTURN1_OFS
                               EQU              0x238
  422 00000100 00000240 
                       EMC_STA_CFG2_OFS
                               EQU              0x240
  423 00000100 00000244 
                       EMC_STA_WWEN2_OFS
                               EQU              0x244
  424 00000100 00000248 
                       EMC_STA_WOEN2_OFS
                               EQU              0x248
  425 00000100 0000024C 
                       EMC_STA_WRD2_OFS
                               EQU              0x24C
  426 00000100 00000250 
                       EMC_STA_WPAGE2_OFS
                               EQU              0x250
  427 00000100 00000254 
                       EMC_STA_WWR2_OFS
                               EQU              0x254
  428 00000100 00000258 
                       EMC_STA_WTURN2_OFS



ARM Macro Assembler    Page 14 


                               EQU              0x258
  429 00000100 00000260 
                       EMC_STA_CFG3_OFS
                               EQU              0x260
  430 00000100 00000264 
                       EMC_STA_WWEN3_OFS
                               EQU              0x264
  431 00000100 00000268 
                       EMC_STA_WOEN3_OFS
                               EQU              0x268
  432 00000100 0000026C 
                       EMC_STA_WRD3_OFS
                               EQU              0x26C
  433 00000100 00000270 
                       EMC_STA_WPAGE3_OFS
                               EQU              0x270
  434 00000100 00000274 
                       EMC_STA_WWR3_OFS
                               EQU              0x274
  435 00000100 00000278 
                       EMC_STA_WTURN3_OFS
                               EQU              0x278
  436 00000100 00000880 
                       EMC_STA_EXT_W_OFS
                               EQU              0x880
  437 00000100         
  438 00000100         ; Constants
  439 00000100 00000000 
                       NORMAL_CMD
                               EQU              (0x0 << 7)  ; NORMAL        Com
                                                            mand
  440 00000100 00000080 
                       MODE_CMD
                               EQU              (0x1 << 7)  ; MODE          Com
                                                            mand
  441 00000100 00000100 
                       PALL_CMD
                               EQU              (0x2 << 7)  ; Precharge All Com
                                                            mand
  442 00000100 00000180 
                       NOP_CMD EQU              (0x3 << 7)  ; NOP           Com
                                                            mand
  443 00000100         
  444 00000100 00080000 
                       BUFEN_Const
                               EQU              (1 << 19)   ; Buffer enable bit
                                                            
  445 00000100 00000800 
                       EMC_PCONP_Const
                               EQU              (1 << 11)   ; PCONP val to enab
                                                            le power for EMC
  446 00000100         
  447 00000100         ; External Memory Pins definitions
  448 00000100         ; pin functions for SDRAM, NOR and NAND flash interfacin
                       g
  449 00000100 55010115 
                       EMC_PINSEL5_Val
                               EQU              0x55010115  ; !CAS, !RAS, CLKOU
                                                            T0, !DYCS0, DQMOUT0



ARM Macro Assembler    Page 15 


                                                            , DQMOUT1, DQMOUT2,
                                                             DQMOUT3
  450 00000100 55555555 
                       EMC_PINSEL6_Val
                               EQU              0x55555555  ; D0 .. D15
  451 00000100 55555555 
                       EMC_PINSEL7_Val
                               EQU              0x55555555  ; D16..D31
  452 00000100 55555555 
                       EMC_PINSEL8_Val
                               EQU              0x55555555  ; A0 .. A15
  453 00000100 50055555 
                       EMC_PINSEL9_Val
                               EQU              0x50055555  ;     ; A16 .. A23,
                                                             !OE, !WE, !CS0, !C
                                                            S1
  454 00000100         
  455 00000100         ;//     External Memory Controller Setup (EMC) ---------
                       ------------------------
  456 00000100         ;// <e> External Memory Controller Setup (EMC)
  457 00000100 00000001 
                       EMC_SETUP
                               EQU              1
  458 00000100         
  459 00000100         ;//   <h> EMC Control Register (EMCControl)
  460 00000100         ;//     <i> Controls operation of the memory controller
  461 00000100         ;//     <o0.2> L: Low-power mode enable
  462 00000100         ;//     <o0.1> M: Address mirror enable
  463 00000100         ;//     <o0.0> E: EMC enable
  464 00000100         ;//   </h>
  465 00000100 00000001 
                       EMC_CTRL_Val
                               EQU              0x00000001
  466 00000100         
  467 00000100         ;//   <h> EMC Configuration Register (EMCConfig)
  468 00000100         ;//     <i> Configures operation of the memory controlle
                       r
  469 00000100         ;//     <o0.8> CCLK: CLKOUT ratio
  470 00000100         ;//       <0=> 1:1
  471 00000100         ;//       <1=> 1:2
  472 00000100         ;//     <o0.0> Endian mode
  473 00000100         ;//       <0=> Little-endian
  474 00000100         ;//       <1=> Big-endian
  475 00000100         ;//   </h>
  476 00000100 00000000 
                       EMC_CONFIG_Val
                               EQU              0x00000000
  477 00000100         
  478 00000100         ;//       Dynamic Memory Interface Setup ---------------
                       ------------------------
  479 00000100         ;//   <e> Dynamic Memory Interface Setup
  480 00000100 00000001 
                       EMC_DYNAMIC_SETUP
                               EQU              1
  481 00000100         
  482 00000100         ;//     <h> Dynamic Memory Refresh Timer Register (EMCDy
                       namicRefresh)
  483 00000100         ;//       <i> Configures dynamic memory refresh operatio
                       n



ARM Macro Assembler    Page 16 


  484 00000100         ;//       <o0.0..10> REFRESH: Refresh timer <0x000-0x7FF
                       >
  485 00000100         ;//         <i> 0 = refresh disabled, 0x01-0x7FF: value 
                       * 16 CCLKS
  486 00000100         ;//     </h>
  487 00000100 0000001C 
                       EMC_DYN_RFSH_Val
                               EQU              0x0000001C
  488 00000100         
  489 00000100         ;//     <h> Dynamic Memory Read Configuration Register (
                       EMCDynamicReadConfig)
  490 00000100         ;//       <i> Configures the dynamic memory read strateg
                       y
  491 00000100         ;//       <o0.0..1> RD: Read data strategy
  492 00000100         ;//                  <0=> Clock out delayed strategy
  493 00000100         ;//         <1=> Command delayed strategy
  494 00000100         ;//         <2=> Command delayed strategy plus one clock
                        cycle
  495 00000100         ;//         <3=> Command delayed strategy plus two clock
                        cycles
  496 00000100         ;//     </h>
  497 00000100 00000001 
                       EMC_DYN_RD_CFG_Val
                               EQU              0x00000001
  498 00000100         
  499 00000100         ;//     <h> Dynamic Memory Timings
  500 00000100         ;//       <h> Dynamic Memory Percentage Command Period R
                       egister (EMCDynamictRP)
  501 00000100         ;//         <o0.0..3> tRP: Precharge command period <1-1
                       6> <#-1>
  502 00000100         ;//           <i> The delay is in EMCCLK cycles
  503 00000100         ;//           <i> This value is normally found in SDRAM 
                       data sheets as tRP
  504 00000100         ;//       </h>
  505 00000100         ;//       <h> Dynamic Memory Active to Precharge Command
                        Period Register (EMCDynamictRAS)
  506 00000100         ;//         <o1.0..3> tRAS: Active to precharge command 
                       period <1-16> <#-1>
  507 00000100         ;//           <i> The delay is in EMCCLK cycles
  508 00000100         ;//           <i> This value is normally found in SDRAM 
                       data sheets as tRAS
  509 00000100         ;//       </h>
  510 00000100         ;//       <h> Dynamic Memory Self-refresh Exit Time Regi
                       ster (EMCDynamictSREX)
  511 00000100         ;//         <o2.0..3> tSREX: Self-refresh exit time <1-1
                       6> <#-1>
  512 00000100         ;//           <i> The delay is in CCLK cycles
  513 00000100         ;//           <i> This value is normally found in SDRAM 
                       data sheets as tSREX, 
  514 00000100         ;//           <i> for devices without this parameter you
                        use the same value as tXSR
  515 00000100         ;//       </h>
  516 00000100         ;//       <h> Dynamic Memory Last Data Out to Active Tim
                       e Register (EMCDynamictAPR)
  517 00000100         ;//         <o3.0..3> tAPR: Last-data-out to active comm
                       and time <1-16> <#-1>
  518 00000100         ;//           <i> The delay is in CCLK cycles
  519 00000100         ;//           <i> This value is normally found in SDRAM 
                       data sheets as tAPR



ARM Macro Assembler    Page 17 


  520 00000100         ;//       </h>
  521 00000100         ;//       <h> Dynamic Memory Data-in to Active Command T
                       ime Register (EMCDynamictDAL)
  522 00000100         ;//         <o4.0..3> tDAL: Data-in to active command ti
                       me <1-16> <#-1>
  523 00000100         ;//           <i> The delay is in CCLK cycles
  524 00000100         ;//           <i> This value is normally found in SDRAM 
                       data sheets as tDAL or tAPW
  525 00000100         ;//       </h>
  526 00000100         ;//       <h> Dynamic Memory Write Recovery Time Registe
                       r (EMCDynamictWR)
  527 00000100         ;//         <o5.0..3> tWR: Write recovery time <1-16> <#
                       -1>
  528 00000100         ;//           <i> The delay is in CCLK cycles
  529 00000100         ;//           <i> This value is normally found in SDRAM 
                       data sheets as tWR, tDPL, tRWL, or tRDL
  530 00000100         ;//       </h>
  531 00000100         ;//       <h> Dynamic Memory Active to Active Command Pe
                       riod Register (EMCDynamictRC)
  532 00000100         ;//         <o6.0..4> tRC: Active to active command peri
                       od <1-32> <#-1>
  533 00000100         ;//           <i> The delay is in CCLK cycles
  534 00000100         ;//           <i> This value is normally found in SDRAM 
                       data sheets as tRC
  535 00000100         ;//       </h>
  536 00000100         ;//       <h> Dynamic Memory Auto-refresh Period Registe
                       r (EMCDynamictRFC)
  537 00000100         ;//         <o7.0..4> tRFC: Auto-refresh period and auto
                       -refresh to active command period <1-32> <#-1>
  538 00000100         ;//           <i> The delay is in CCLK cycles
  539 00000100         ;//           <i> This value is normally found in SDRAM 
                       data sheets as tRFC or  tRC
  540 00000100         ;//       </h>
  541 00000100         ;//       <h> Dynamic Memory Exit Self-refresh Register 
                       (EMCDynamictXSR)
  542 00000100         ;//         <o8.0..4> tXSR: Exit self-refresh to active 
                       command time <1-32> <#-1>
  543 00000100         ;//           <i> The delay is in CCLK cycles
  544 00000100         ;//           <i> This value is normally found in SDRAM 
                       data sheets as tXSR
  545 00000100         ;//       </h>
  546 00000100         ;//       <h> Dynamic Memory Active Bank A to Active Ban
                       k B Time Register (EMCDynamicRRD)
  547 00000100         ;//         <o9.0..3> tRRD: Active bank A to active bank
                        B latency <1-16> <#-1>
  548 00000100         ;//           <i> The delay is in CCLK cycles
  549 00000100         ;//           <i> This value is normally found in SDRAM 
                       data sheets as tRRD
  550 00000100         ;//       </h>
  551 00000100         ;//       <h> Dynamic Memory Load Mode Register to Activ
                       e Command Time (EMCDynamictMRD)
  552 00000100         ;//         <o10.0..3> tMRD: Load mode register to activ
                       e command time <1-16> <#-1>
  553 00000100         ;//           <i> The delay is in CCLK cycles
  554 00000100         ;//           <i> This value is normally found in SDRAM 
                       data sheets as tMRD or tRSA
  555 00000100         ;//       </h>
  556 00000100         ;//     </h>
  557 00000100 00000002 



ARM Macro Assembler    Page 18 


                       EMC_DYN_RP_Val
                               EQU              0x00000002
  558 00000100 00000003 
                       EMC_DYN_RAS_Val
                               EQU              0x00000003
  559 00000100 00000007 
                       EMC_DYN_SREX_Val
                               EQU              0x00000007
  560 00000100 00000002 
                       EMC_DYN_APR_Val
                               EQU              0x00000002
  561 00000100 00000005 
                       EMC_DYN_DAL_Val
                               EQU              0x00000005
  562 00000100 00000001 
                       EMC_DYN_WR_Val
                               EQU              0x00000001
  563 00000100 00000005 
                       EMC_DYN_RC_Val
                               EQU              0x00000005
  564 00000100 00000005 
                       EMC_DYN_RFC_Val
                               EQU              0x00000005
  565 00000100 00000007 
                       EMC_DYN_XSR_Val
                               EQU              0x00000007
  566 00000100 00000001 
                       EMC_DYN_RRD_Val
                               EQU              0x00000001
  567 00000100 00000002 
                       EMC_DYN_MRD_Val
                               EQU              0x00000002
  568 00000100         
  569 00000100         ;//     <e> Configure External Bus Behaviour for Dynamic
                        CS0 Area
  570 00000100 00000001 
                       EMC_DYNCS0_SETUP
                               EQU              1
  571 00000100         
  572 00000100         ;//       <h> Dynamic Memory Configuration Register (EMC
                       DynamicConfig0)
  573 00000100         ;//         <i> Defines the configuration information fo
                       r the dynamic memory CS0
  574 00000100         ;//         <o0.20> P: Write protect
  575 00000100         ;//         <o0.19> B: Buffer enable
  576 00000100         ;//         <o0.14> AM 14: External bus data width
  577 00000100         ;//           <0=> 16 bit
  578 00000100         ;//           <1=> 32 bit
  579 00000100         ;//         <o0.12> AM 12: External bus memory type
  580 00000100         ;//           <0=> High-performance
  581 00000100         ;//           <1=> Low-power SDRAM
  582 00000100         ;//         <o0.7..11> AM 11..7: External bus address ma
                       pping (Row, Bank, Column)
  583 00000100         ;//           <0x00=> 16 Mb = 2MB (2Mx8), 2 banks, row l
                       ength = 11, column length = 9
  584 00000100         ;//           <0x01=> 16 Mb = 2MB (1Mx16), 2 banks, row 
                       length = 11, column length = 8
  585 00000100         ;//           <0x04=> 64 Mb = 8MB (8Mx8), 4 banks, row l
                       ength = 12, column length = 9



ARM Macro Assembler    Page 19 


  586 00000100         ;//           <0x05=> 64 Mb = 8MB (4Mx16), 4 banks, row 
                       length = 12, column length = 8
  587 00000100         ;//           <0x08=> 128 Mb = 16MB (16Mx8), 4 banks, ro
                       w length = 12, column length = 10
  588 00000100         ;//           <0x09=> 128 Mb = 16MB (8Mx16), 4 banks, ro
                       w length = 12, column length = 9
  589 00000100         ;//           <0x0C=> 256 Mb = 32MB (32Mx8), 4 banks, ro
                       w length = 13, column length = 10
  590 00000100         ;//           <0x0D=> 256 Mb = 32MB (16Mx16), 4 banks, r
                       ow length = 13, column length = 9
  591 00000100         ;//           <0x10=> 512 Mb = 64MB (64Mx8), 4 banks, ro
                       w length = 13, column length = 11
  592 00000100         ;//           <0x11=> 512 Mb = 64MB (32Mx16), 4 banks, r
                       ow length = 13, column length = 10
  593 00000100         ;//         <o0.3..4> MD: Memory device
  594 00000100         ;//           <0=> SDRAM
  595 00000100         ;//           <1=> Low-power SDRAM
  596 00000100         ;//           <2=> Micron SyncFlash
  597 00000100         ;//       </h>
  598 00000100 00080680 
                       EMC_DYN_CFG0_Val
                               EQU              0x00080680
  599 00000100         
  600 00000100         ;//       <h> Dynamic Memory RAS & CAS Delay register (E
                       MCDynamicRASCAS0)
  601 00000100         ;//         <i> Controls the RAS and CAS latencies for t
                       he dynamic memory CS0
  602 00000100         ;//         <o0.8..9> CAS: CAS latency
  603 00000100         ;//           <1=> One CCLK cycle
  604 00000100         ;//           <2=> Two CCLK cycles
  605 00000100         ;//           <3=> Three CCLK cycles
  606 00000100         ;//         <o0.0..1> RAS: RAS latency (active to read/w
                       rite delay)
  607 00000100         ;//           <1=> One CCLK cycle
  608 00000100         ;//           <2=> Two CCLK cycles
  609 00000100         ;//           <3=> Three CCLK cycles
  610 00000100         ;//       </h>
  611 00000100 00000303 
                       EMC_DYN_RASCAS0_Val
                               EQU              0x00000303
  612 00000100         
  613 00000100         ;//     </e> End of Dynamic Setup for CS0 Area
  614 00000100         
  615 00000100         
  616 00000100         ;//     <e> Configure External Bus Behaviour for Dynamic
                        CS1 Area
  617 00000100 00000000 
                       EMC_DYNCS1_SETUP
                               EQU              0
  618 00000100         
  619 00000100         ;//       <h> Dynamic Memory Configuration Register (EMC
                       DynamicConfig1)
  620 00000100         ;//         <i> Defines the configuration information fo
                       r the dynamic memory CS1
  621 00000100         ;//         <o0.20> P: Write protect
  622 00000100         ;//         <o0.19> B: Buffer enable
  623 00000100         ;//         <o0.14> AM 14: External bus data width
  624 00000100         ;//           <0=> 16 bit
  625 00000100         ;//           <1=> 32 bit



ARM Macro Assembler    Page 20 


  626 00000100         ;//         <o0.12> AM 12: External bus memory type
  627 00000100         ;//           <0=> High-performance
  628 00000100         ;//           <1=> Low-power SDRAM
  629 00000100         ;//         <o0.7..11> AM 11..7: External bus address ma
                       pping (Row, Bank, Column)
  630 00000100         ;//           <0x00=> 16 Mb = 2MB (2Mx8), 2 banks, row l
                       ength = 11, column length = 9
  631 00000100         ;//           <0x01=> 16 Mb = 2MB (1Mx16), 2 banks, row 
                       length = 11, column length = 8
  632 00000100         ;//           <0x04=> 64 Mb = 8MB (8Mx8), 4 banks, row l
                       ength = 12, column length = 9
  633 00000100         ;//           <0x05=> 64 Mb = 8MB (4Mx16), 4 banks, row 
                       length = 12, column length = 8
  634 00000100         ;//           <0x08=> 128 Mb = 16MB (16Mx8), 4 banks, ro
                       w length = 12, column length = 10
  635 00000100         ;//           <0x09=> 128 Mb = 16MB (8Mx16), 4 banks, ro
                       w length = 12, column length = 9
  636 00000100         ;//           <0x0C=> 256 Mb = 32MB (32Mx8), 4 banks, ro
                       w length = 13, column length = 10
  637 00000100         ;//           <0x0D=> 256 Mb = 32MB (16Mx16), 4 banks, r
                       ow length = 13, column length = 9
  638 00000100         ;//           <0x10=> 512 Mb = 64MB (64Mx8), 4 banks, ro
                       w length = 13, column length = 11
  639 00000100         ;//           <0x11=> 512 Mb = 64MB (32Mx16), 4 banks, r
                       ow length = 13, column length = 10
  640 00000100         ;//         <o0.3..4> MD: Memory device
  641 00000100         ;//           <0=> SDRAM
  642 00000100         ;//           <1=> Low-power SDRAM
  643 00000100         ;//           <2=> Micron SyncFlash
  644 00000100         ;//       </h>
  645 00000100 00000000 
                       EMC_DYN_CFG1_Val
                               EQU              0x00000000
  646 00000100         
  647 00000100         ;//       <h> Dynamic Memory RAS & CAS Delay register (E
                       MCDynamicRASCAS1)
  648 00000100         ;//         <i> Controls the RAS and CAS latencies for t
                       he dynamic memory CS1
  649 00000100         ;//         <o0.8..9> CAS: CAS latency
  650 00000100         ;//           <1=> One CCLK cycle
  651 00000100         ;//           <2=> Two CCLK cycles
  652 00000100         ;//           <3=> Three CCLK cycles
  653 00000100         ;//         <o0.0..1> RAS: RAS latency (active to read/w
                       rite delay)
  654 00000100         ;//           <1=> One CCLK cycle
  655 00000100         ;//           <2=> Two CCLK cycles
  656 00000100         ;//           <3=> Three CCLK cycles
  657 00000100         ;//       </h>
  658 00000100 00000303 
                       EMC_DYN_RASCAS1_Val
                               EQU              0x00000303
  659 00000100         
  660 00000100         ;//     </e> End of Dynamic Setup for CS1 Area
  661 00000100         
  662 00000100         ;//     <e> Configure External Bus Behaviour for Dynamic
                        CS2 Area
  663 00000100 00000000 
                       EMC_DYNCS2_SETUP
                               EQU              0



ARM Macro Assembler    Page 21 


  664 00000100         
  665 00000100         ;//       <h> Dynamic Memory Configuration Register (EMC
                       DynamicConfig2)
  666 00000100         ;//         <i> Defines the configuration information fo
                       r the dynamic memory CS2
  667 00000100         ;//         <o0.20> P: Write protect
  668 00000100         ;//         <o0.19> B: Buffer enable
  669 00000100         ;//         <o0.14> AM 14: External bus data width
  670 00000100         ;//           <0=> 16 bit
  671 00000100         ;//           <1=> 32 bit
  672 00000100         ;//         <o0.12> AM 12: External bus memory type
  673 00000100         ;//           <0=> High-performance
  674 00000100         ;//           <1=> Low-power SDRAM
  675 00000100         ;//         <o0.7..11> AM 11..7: External bus address ma
                       pping (Row, Bank, Column)
  676 00000100         ;//           <0x00=> 16 Mb = 2MB (2Mx8), 2 banks, row l
                       ength = 11, column length = 9
  677 00000100         ;//           <0x01=> 16 Mb = 2MB (1Mx16), 2 banks, row 
                       length = 11, column length = 8
  678 00000100         ;//           <0x04=> 64 Mb = 8MB (8Mx8), 4 banks, row l
                       ength = 12, column length = 9
  679 00000100         ;//           <0x05=> 64 Mb = 8MB (4Mx16), 4 banks, row 
                       length = 12, column length = 8
  680 00000100         ;//           <0x08=> 128 Mb = 16MB (16Mx8), 4 banks, ro
                       w length = 12, column length = 10
  681 00000100         ;//           <0x09=> 128 Mb = 16MB (8Mx16), 4 banks, ro
                       w length = 12, column length = 9
  682 00000100         ;//           <0x0C=> 256 Mb = 32MB (32Mx8), 4 banks, ro
                       w length = 13, column length = 10
  683 00000100         ;//           <0x0D=> 256 Mb = 32MB (16Mx16), 4 banks, r
                       ow length = 13, column length = 9
  684 00000100         ;//           <0x10=> 512 Mb = 64MB (64Mx8), 4 banks, ro
                       w length = 13, column length = 11
  685 00000100         ;//           <0x11=> 512 Mb = 64MB (32Mx16), 4 banks, r
                       ow length = 13, column length = 10
  686 00000100         ;//         <o0.3..4> MD: Memory device
  687 00000100         ;//           <0=> SDRAM
  688 00000100         ;//           <1=> Low-power SDRAM
  689 00000100         ;//           <2=> Micron SyncFlash
  690 00000100         ;//       </h>
  691 00000100 00000000 
                       EMC_DYN_CFG2_Val
                               EQU              0x00000000
  692 00000100         
  693 00000100         ;//       <h> Dynamic Memory RAS & CAS Delay register (E
                       MCDynamicRASCAS2)
  694 00000100         ;//         <i> Controls the RAS and CAS latencies for t
                       he dynamic memory CS2
  695 00000100         ;//         <o0.8..9> CAS: CAS latency
  696 00000100         ;//           <1=> One CCLK cycle
  697 00000100         ;//           <2=> Two CCLK cycles
  698 00000100         ;//           <3=> Three CCLK cycles
  699 00000100         ;//         <o0.0..1> RAS: RAS latency (active to read/w
                       rite delay)
  700 00000100         ;//           <1=> One CCLK cycle
  701 00000100         ;//           <2=> Two CCLK cycles
  702 00000100         ;//           <3=> Three CCLK cycles
  703 00000100         ;//       </h>
  704 00000100 00000303 



ARM Macro Assembler    Page 22 


                       EMC_DYN_RASCAS2_Val
                               EQU              0x00000303
  705 00000100         
  706 00000100         ;//     </e> End of Dynamic Setup for CS2 Area
  707 00000100         
  708 00000100         ;//     <e> Configure External Bus Behaviour for Dynamic
                        CS3 Area
  709 00000100 00000000 
                       EMC_DYNCS3_SETUP
                               EQU              0
  710 00000100         
  711 00000100         ;//       <h> Dynamic Memory Configuration Register (EMC
                       DynamicConfig3)
  712 00000100         ;//         <i> Defines the configuration information fo
                       r the dynamic memory CS3
  713 00000100         ;//         <o0.20> P: Write protect
  714 00000100         ;//         <o0.19> B: Buffer enable
  715 00000100         ;//         <o0.14> AM 14: External bus data width
  716 00000100         ;//           <0=> 16 bit
  717 00000100         ;//           <1=> 32 bit
  718 00000100         ;//         <o0.12> AM 12: External bus memory type
  719 00000100         ;//           <0=> High-performance
  720 00000100         ;//           <1=> Low-power SDRAM
  721 00000100         ;//         <o0.7..11> AM 11..7: External bus address ma
                       pping (Row, Bank, Column)
  722 00000100         ;//           <0x00=> 16 Mb = 2MB (2Mx8), 2 banks, row l
                       ength = 11, column length = 9
  723 00000100         ;//           <0x01=> 16 Mb = 2MB (1Mx16), 2 banks, row 
                       length = 11, column length = 8
  724 00000100         ;//           <0x04=> 64 Mb = 8MB (8Mx8), 4 banks, row l
                       ength = 12, column length = 9
  725 00000100         ;//           <0x05=> 64 Mb = 8MB (4Mx16), 4 banks, row 
                       length = 12, column length = 8
  726 00000100         ;//           <0x08=> 128 Mb = 16MB (16Mx8), 4 banks, ro
                       w length = 12, column length = 10
  727 00000100         ;//           <0x09=> 128 Mb = 16MB (8Mx16), 4 banks, ro
                       w length = 12, column length = 9
  728 00000100         ;//           <0x0C=> 256 Mb = 32MB (32Mx8), 4 banks, ro
                       w length = 13, column length = 10
  729 00000100         ;//           <0x0D=> 256 Mb = 32MB (16Mx16), 4 banks, r
                       ow length = 13, column length = 9
  730 00000100         ;//           <0x10=> 512 Mb = 64MB (64Mx8), 4 banks, ro
                       w length = 13, column length = 11
  731 00000100         ;//           <0x11=> 512 Mb = 64MB (32Mx16), 4 banks, r
                       ow length = 13, column length = 10
  732 00000100         ;//         <o0.3..4> MD: Memory device
  733 00000100         ;//           <0=> SDRAM
  734 00000100         ;//           <1=> Low-power SDRAM
  735 00000100         ;//           <2=> Micron SyncFlash
  736 00000100         ;//       </h>
  737 00000100 00000000 
                       EMC_DYN_CFG3_Val
                               EQU              0x00000000
  738 00000100         
  739 00000100         ;//       <h> Dynamic Memory RAS & CAS Delay register (E
                       MCDynamicRASCAS3)
  740 00000100         ;//         <i> Controls the RAS and CAS latencies for t
                       he dynamic memory CS3
  741 00000100         ;//         <o0.8..9> CAS: CAS latency



ARM Macro Assembler    Page 23 


  742 00000100         ;//           <1=> One CCLK cycle
  743 00000100         ;//           <2=> Two CCLK cycles
  744 00000100         ;//           <3=> Three CCLK cycles
  745 00000100         ;//         <o0.0..1> RAS: RAS latency (active to read/w
                       rite delay)
  746 00000100         ;//           <1=> One CCLK cycle
  747 00000100         ;//           <2=> Two CCLK cycles
  748 00000100         ;//           <3=> Three CCLK cycles
  749 00000100         ;//       </h>
  750 00000100 00000303 
                       EMC_DYN_RASCAS3_Val
                               EQU              0x00000303
  751 00000100         
  752 00000100         ;//     </e> End of Dynamic Setup for CS3 Area
  753 00000100         
  754 00000100         ;//   </e> End of Dynamic Setup
  755 00000100         
  756 00000100         ;//       Static Memory Interface Setup ----------------
                       ------------------------
  757 00000100         ;//   <e> Static Memory Interface Setup
  758 00000100 00000001 
                       EMC_STATIC_SETUP
                               EQU              1
  759 00000100         
  760 00000100         ;//         Configure External Bus Behaviour for Static 
                       CS0 Area ---------------
  761 00000100         ;//     <e> Configure External Bus Behaviour for Static 
                       CS0 Area
  762 00000100 00000001 
                       EMC_STACS0_SETUP
                               EQU              1
  763 00000100         
  764 00000100         ;//       <h> Static Memory Configuration Register (EMCS
                       taticConfig0)
  765 00000100         ;//         <i> Defines the configuration information fo
                       r the static memory CS0
  766 00000100         ;//         <o0.20> WP: Write protect
  767 00000100         ;//         <o0.19> B: Buffer enable
  768 00000100         ;//         <o0.8> EW: Extended wait enable
  769 00000100         ;//         <o0.7> PB: Byte lane state
  770 00000100         ;//           <0=> For reads BLSn are HIGH, for writes B
                       LSn are LOW
  771 00000100         ;//           <1=> For reads BLSn are LOW, for writes BL
                       Sn are LOW
  772 00000100         ;//         <o0.6> PC: Chip select polarity
  773 00000100         ;//           <0=> Active LOW chip select
  774 00000100         ;//           <1=> Active HIGH chip select
  775 00000100         ;//         <o0.3> PM: Page mode enable
  776 00000100         ;//         <o0.0..1> MW: Memory width
  777 00000100         ;//           <0=> 8 bit
  778 00000100         ;//           <1=> 16 bit
  779 00000100         ;//           <2=> 32 bit
  780 00000100         ;//       </h>
  781 00000100 00000081 
                       EMC_STA_CFG0_Val
                               EQU              0x00000081
  782 00000100         
  783 00000100         ;//       <h> Static Memory Write Enable Delay Register 
                       (EMCStaticWaitWen0)



ARM Macro Assembler    Page 24 


  784 00000100         ;//         <i> Selects the delay from CS0 to write enab
                       le
  785 00000100         ;//         <o.0..3> WAITWEN: Wait write enable <1-16> <
                       #-1>
  786 00000100         ;//           <i> The delay is in CCLK cycles
  787 00000100         ;//       </h>
  788 00000100 00000002 
                       EMC_STA_WWEN0_Val
                               EQU              0x00000002
  789 00000100         
  790 00000100         ;//       <h> Static Memory Output Enable Delay register
                        (EMCStaticWaitOen0)
  791 00000100         ;//         <i> Selects the delay from CS0 or address ch
                       ange, whichever is later, to output enable
  792 00000100         ;//         <o.0..3> WAITOEN: Wait output enable <0-15>
  793 00000100         ;//           <i> The delay is in CCLK cycles
  794 00000100         ;//       </h>
  795 00000100 00000002 
                       EMC_STA_WOEN0_Val
                               EQU              0x00000002
  796 00000100         
  797 00000100         ;//       <h> Static Memory Read Delay Register (EMCStat
                       icWaitRd0)
  798 00000100         ;//         <i> Selects the delay from CS0 to a read acc
                       ess
  799 00000100         ;//         <o.0..4> WAITRD: Non-page mode read wait sta
                       tes or asynchronous page mode read first access wait sta
                       tes <1-32> <#-1>
  800 00000100         ;//           <i> The delay is in CCLK cycles
  801 00000100         ;//       </h>
  802 00000100 0000001F 
                       EMC_STA_WRD0_Val
                               EQU              0x0000001F
  803 00000100         
  804 00000100         ;//       <h> Static Memory Page Mode Read Delay Registe
                       r (EMCStaticWaitPage0)
  805 00000100         ;//         <i> Selects the delay for asynchronous page 
                       mode sequential accesses for CS0
  806 00000100         ;//         <o.0..4> WAITPAGE: Asynchronous page mode re
                       ad after the first read wait states <1-32> <#-1>
  807 00000100         ;//           <i> The delay is in CCLK cycles
  808 00000100         ;//       </h>
  809 00000100 0000001F 
                       EMC_STA_WPAGE0_Val
                               EQU              0x0000001F
  810 00000100         
  811 00000100         ;//       <h> Static Memory Write Delay Register (EMCSta
                       ticWaitWr0)
  812 00000100         ;//         <i> Selects the delay from CS0 to a write ac
                       cess
  813 00000100         ;//         <o.0..4> WAITWR: Write wait states <2-33> <#
                       -2>
  814 00000100         ;//           <i> The delay is in CCLK cycles
  815 00000100         ;//       </h>
  816 00000100 0000001F 
                       EMC_STA_WWR0_Val
                               EQU              0x0000001F
  817 00000100         
  818 00000100         ;//       <h> Static Memory Turn Round Delay Register (E



ARM Macro Assembler    Page 25 


                       MCStaticWaitTurn0)
  819 00000100         ;//         <i> Selects the number of bus turnaround cyc
                       les for CS0
  820 00000100         ;//         <o.0..4> WAITTURN: Bus turnaround cycles <1-
                       16> <#-1>
  821 00000100         ;//           <i> The delay is in CCLK cycles
  822 00000100         ;//       </h>
  823 00000100 0000000F 
                       EMC_STA_WTURN0_Val
                               EQU              0x0000000F
  824 00000100         
  825 00000100         ;//     </e> End of Static Setup for Static CS0 Area
  826 00000100         
  827 00000100         ;//         Configure External Bus Behaviour for Static 
                       CS1 Area ---------------
  828 00000100         ;//     <e> Configure External Bus Behaviour for Static 
                       CS1 Area
  829 00000100 00000000 
                       EMC_STACS1_SETUP
                               EQU              0
  830 00000100         
  831 00000100         ;//       <h> Static Memory Configuration Register (EMCS
                       taticConfig1)
  832 00000100         ;//         <i> Defines the configuration information fo
                       r the static memory CS1
  833 00000100         ;//         <o0.20> WP: Write protect
  834 00000100         ;//         <o0.19> B: Buffer enable
  835 00000100         ;//         <o0.8> EW: Extended wait enable
  836 00000100         ;//         <o0.7> PB: Byte lane state
  837 00000100         ;//           <0=> For reads BLSn are HIGH, for writes B
                       LSn are LOW
  838 00000100         ;//           <1=> For reads BLSn are LOW, for writes BL
                       Sn are LOW
  839 00000100         ;//         <o0.6> PC: Chip select polarity
  840 00000100         ;//           <0=> Active LOW chip select
  841 00000100         ;//           <1=> Active HIGH chip select
  842 00000100         ;//         <o0.3> PM: Page mode enable
  843 00000100         ;//         <o0.0..1> MW: Memory width
  844 00000100         ;//           <0=> 8 bit
  845 00000100         ;//           <1=> 16 bit
  846 00000100         ;//           <2=> 32 bit
  847 00000100         ;//       </h>
  848 00000100 00000000 
                       EMC_STA_CFG1_Val
                               EQU              0x00000000
  849 00000100         
  850 00000100         ;//       <h> Static Memory Write Enable Delay Register 
                       (EMCStaticWaitWen1)
  851 00000100         ;//         <i> Selects the delay from CS1 to write enab
                       le
  852 00000100         ;//         <o.0..3> WAITWEN: Wait write enable <1-16> <
                       #-1>
  853 00000100         ;//           <i> The delay is in CCLK cycles
  854 00000100         ;//       </h>
  855 00000100 00000000 
                       EMC_STA_WWEN1_Val
                               EQU              0x00000000
  856 00000100         
  857 00000100         ;//       <h> Static Memory Output Enable Delay register



ARM Macro Assembler    Page 26 


                        (EMCStaticWaitOen1)
  858 00000100         ;//         <i> Selects the delay from CS1 or address ch
                       ange, whichever is later, to output enable
  859 00000100         ;//         <o.0..3> WAITOEN: Wait output enable <0-15>
  860 00000100         ;//           <i> The delay is in CCLK cycles
  861 00000100         ;//       </h>
  862 00000100 00000000 
                       EMC_STA_WOEN1_Val
                               EQU              0x00000000
  863 00000100         
  864 00000100         ;//       <h> Static Memory Read Delay Register (EMCStat
                       icWaitRd1)
  865 00000100         ;//         <i> Selects the delay from CS1 to a read acc
                       ess
  866 00000100         ;//         <o.0..4> WAITRD: Non-page mode read wait sta
                       tes or asynchronous page mode read first access wait sta
                       tes <1-32> <#-1>
  867 00000100         ;//           <i> The delay is in CCLK cycles
  868 00000100         ;//       </h>
  869 00000100 0000001F 
                       EMC_STA_WRD1_Val
                               EQU              0x0000001F
  870 00000100         
  871 00000100         ;//       <h> Static Memory Page Mode Read Delay Registe
                       r (EMCStaticWaitPage0)
  872 00000100         ;//         <i> Selects the delay for asynchronous page 
                       mode sequential accesses for CS1
  873 00000100         ;//         <o.0..4> WAITPAGE: Asynchronous page mode re
                       ad after the first read wait states <1-32> <#-1>
  874 00000100         ;//           <i> The delay is in CCLK cycles
  875 00000100         ;//       </h>
  876 00000100 0000001F 
                       EMC_STA_WPAGE1_Val
                               EQU              0x0000001F
  877 00000100         
  878 00000100         ;//       <h> Static Memory Write Delay Register (EMCSta
                       ticWaitWr1)
  879 00000100         ;//         <i> Selects the delay from CS1 to a write ac
                       cess
  880 00000100         ;//         <o.0..4> WAITWR: Write wait states <2-33> <#
                       -2>
  881 00000100         ;//           <i> The delay is in CCLK cycles
  882 00000100         ;//       </h>
  883 00000100 0000001F 
                       EMC_STA_WWR1_Val
                               EQU              0x0000001F
  884 00000100         
  885 00000100         ;//       <h> Static Memory Turn Round Delay Register (E
                       MCStaticWaitTurn1)
  886 00000100         ;//         <i> Selects the number of bus turnaround cyc
                       les for CS1
  887 00000100         ;//         <o.0..4> WAITTURN: Bus turnaround cycles <1-
                       16> <#-1>
  888 00000100         ;//           <i> The delay is in CCLK cycles
  889 00000100         ;//       </h>
  890 00000100 0000000F 
                       EMC_STA_WTURN1_Val
                               EQU              0x0000000F
  891 00000100         



ARM Macro Assembler    Page 27 


  892 00000100         ;//     </e> End of Static Setup for Static CS1 Area
  893 00000100         
  894 00000100         ;//         Configure External Bus Behaviour for Static 
                       CS2 Area ---------------
  895 00000100         ;//     <e> Configure External Bus Behaviour for Static 
                       CS2 Area
  896 00000100 00000000 
                       EMC_STACS2_SETUP
                               EQU              0
  897 00000100         
  898 00000100         ;//       <h> Static Memory Configuration Register (EMCS
                       taticConfig2)
  899 00000100         ;//         <i> Defines the configuration information fo
                       r the static memory CS2
  900 00000100         ;//         <o0.20> WP: Write protect
  901 00000100         ;//         <o0.19> B: Buffer enable
  902 00000100         ;//         <o0.8> EW: Extended wait enable
  903 00000100         ;//         <o0.7> PB: Byte lane state
  904 00000100         ;//           <0=> For reads BLSn are HIGH, for writes B
                       LSn are LOW
  905 00000100         ;//           <1=> For reads BLSn are LOW, for writes BL
                       Sn are LOW
  906 00000100         ;//         <o0.6> PC: Chip select polarity
  907 00000100         ;//           <0=> Active LOW chip select
  908 00000100         ;//           <1=> Active HIGH chip select
  909 00000100         ;//         <o0.3> PM: Page mode enable
  910 00000100         ;//         <o0.0..1> MW: Memory width
  911 00000100         ;//           <0=> 8 bit
  912 00000100         ;//           <1=> 16 bit
  913 00000100         ;//           <2=> 32 bit
  914 00000100         ;//       </h>
  915 00000100 00000000 
                       EMC_STA_CFG2_Val
                               EQU              0x00000000
  916 00000100         
  917 00000100         ;//       <h> Static Memory Write Enable Delay Register 
                       (EMCStaticWaitWen2)
  918 00000100         ;//         <i> Selects the delay from CS2 to write enab
                       le
  919 00000100         ;//         <o.0..3> WAITWEN: Wait write enable <1-16> <
                       #-1>
  920 00000100         ;//           <i> The delay is in CCLK cycles
  921 00000100         ;//       </h>
  922 00000100 00000000 
                       EMC_STA_WWEN2_Val
                               EQU              0x00000000
  923 00000100         
  924 00000100         ;//       <h> Static Memory Output Enable Delay register
                        (EMCStaticWaitOen2)
  925 00000100         ;//         <i> Selects the delay from CS2 or address ch
                       ange, whichever is later, to output enable
  926 00000100         ;//         <o.0..3> WAITOEN: Wait output enable <0-15>
  927 00000100         ;//           <i> The delay is in CCLK cycles
  928 00000100         ;//       </h>
  929 00000100 00000000 
                       EMC_STA_WOEN2_Val
                               EQU              0x00000000
  930 00000100         
  931 00000100         ;//       <h> Static Memory Read Delay Register (EMCStat



ARM Macro Assembler    Page 28 


                       icWaitRd2)
  932 00000100         ;//         <i> Selects the delay from CS2 to a read acc
                       ess
  933 00000100         ;//         <o.0..4> WAITRD: Non-page mode read wait sta
                       tes or asynchronous page mode read first access wait sta
                       tes <1-32> <#-1>
  934 00000100         ;//           <i> The delay is in CCLK cycles
  935 00000100         ;//       </h>
  936 00000100 0000001F 
                       EMC_STA_WRD2_Val
                               EQU              0x0000001F
  937 00000100         
  938 00000100         ;//       <h> Static Memory Page Mode Read Delay Registe
                       r (EMCStaticWaitPage2)
  939 00000100         ;//         <i> Selects the delay for asynchronous page 
                       mode sequential accesses for CS2
  940 00000100         ;//         <o.0..4> WAITPAGE: Asynchronous page mode re
                       ad after the first read wait states <1-32> <#-1>
  941 00000100         ;//           <i> The delay is in CCLK cycles
  942 00000100         ;//       </h>
  943 00000100 0000001F 
                       EMC_STA_WPAGE2_Val
                               EQU              0x0000001F
  944 00000100         
  945 00000100         ;//       <h> Static Memory Write Delay Register (EMCSta
                       ticWaitWr2)
  946 00000100         ;//         <i> Selects the delay from CS2 to a write ac
                       cess
  947 00000100         ;//         <o.0..4> WAITWR: Write wait states <2-33> <#
                       -2>
  948 00000100         ;//           <i> The delay is in CCLK cycles
  949 00000100         ;//       </h>
  950 00000100 0000001F 
                       EMC_STA_WWR2_Val
                               EQU              0x0000001F
  951 00000100         
  952 00000100         ;//       <h> Static Memory Turn Round Delay Register (E
                       MCStaticWaitTurn2)
  953 00000100         ;//         <i> Selects the number of bus turnaround cyc
                       les for CS2
  954 00000100         ;//         <o.0..4> WAITTURN: Bus turnaround cycles <1-
                       16> <#-1>
  955 00000100         ;//           <i> The delay is in CCLK cycles
  956 00000100         ;//       </h>
  957 00000100 0000000F 
                       EMC_STA_WTURN2_Val
                               EQU              0x0000000F
  958 00000100         
  959 00000100         ;//     </e> End of Static Setup for Static CS2 Area
  960 00000100         
  961 00000100         ;//         Configure External Bus Behaviour for Static 
                       CS3 Area ---------------
  962 00000100         ;//     <e> Configure External Bus Behaviour for Static 
                       CS3 Area
  963 00000100 00000000 
                       EMC_STACS3_SETUP
                               EQU              0
  964 00000100         
  965 00000100         ;//       <h> Static Memory Configuration Register (EMCS



ARM Macro Assembler    Page 29 


                       taticConfig3)
  966 00000100         ;//         <i> Defines the configuration information fo
                       r the static memory CS3
  967 00000100         ;//         <o0.20> WP: Write protect
  968 00000100         ;//         <o0.19> B: Buffer enable
  969 00000100         ;//         <o0.8> EW: Extended wait enable
  970 00000100         ;//         <o0.7> PB: Byte lane state
  971 00000100         ;//           <0=> For reads BLSn are HIGH, for writes B
                       LSn are LOW
  972 00000100         ;//           <1=> For reads BLSn are LOW, for writes BL
                       Sn are LOW
  973 00000100         ;//         <o0.6> PC: Chip select polarity
  974 00000100         ;//           <0=> Active LOW chip select
  975 00000100         ;//           <1=> Active HIGH chip select
  976 00000100         ;//         <o0.3> PM: Page mode enable
  977 00000100         ;//         <o0.0..1> MW: Memory width
  978 00000100         ;//           <0=> 8 bit
  979 00000100         ;//           <1=> 16 bit
  980 00000100         ;//           <2=> 32 bit
  981 00000100         ;//       </h>
  982 00000100 00000000 
                       EMC_STA_CFG3_Val
                               EQU              0x00000000
  983 00000100         
  984 00000100         ;//       <h> Static Memory Write Enable Delay Register 
                       (EMCStaticWaitWen3)
  985 00000100         ;//         <i> Selects the delay from CS3 to write enab
                       le
  986 00000100         ;//         <o.0..3> WAITWEN: Wait write enable <1-16> <
                       #-1>
  987 00000100         ;//           <i> The delay is in CCLK cycles
  988 00000100         ;//       </h>
  989 00000100 00000000 
                       EMC_STA_WWEN3_Val
                               EQU              0x00000000
  990 00000100         
  991 00000100         ;//       <h> Static Memory Output Enable Delay register
                        (EMCStaticWaitOen3)
  992 00000100         ;//         <i> Selects the delay from CS3 or address ch
                       ange, whichever is later, to output enable
  993 00000100         ;//         <o.0..3> WAITOEN: Wait output enable <0-15>
  994 00000100         ;//           <i> The delay is in CCLK cycles
  995 00000100         ;//       </h>
  996 00000100 00000000 
                       EMC_STA_WOEN3_Val
                               EQU              0x00000000
  997 00000100         
  998 00000100         ;//       <h> Static Memory Read Delay Register (EMCStat
                       icWaitRd3)
  999 00000100         ;//         <i> Selects the delay from CS3 to a read acc
                       ess
 1000 00000100         ;//         <o.0..4> WAITRD: Non-page mode read wait sta
                       tes or asynchronous page mode read first access wait sta
                       tes <1-32> <#-1>
 1001 00000100         ;//           <i> The delay is in CCLK cycles
 1002 00000100         ;//       </h>
 1003 00000100 0000001F 
                       EMC_STA_WRD3_Val
                               EQU              0x0000001F



ARM Macro Assembler    Page 30 


 1004 00000100         
 1005 00000100         ;//       <h> Static Memory Page Mode Read Delay Registe
                       r (EMCStaticWaitPage3)
 1006 00000100         ;//         <i> Selects the delay for asynchronous page 
                       mode sequential accesses for CS3
 1007 00000100         ;//         <o.0..4> WAITPAGE: Asynchronous page mode re
                       ad after the first read wait states <1-32> <#-1>
 1008 00000100         ;//           <i> The delay is in CCLK cycles
 1009 00000100         ;//       </h>
 1010 00000100 0000001F 
                       EMC_STA_WPAGE3_Val
                               EQU              0x0000001F
 1011 00000100         
 1012 00000100         ;//       <h> Static Memory Write Delay Register (EMCSta
                       ticWaitWr3)
 1013 00000100         ;//         <i> Selects the delay from CS3 to a write ac
                       cess
 1014 00000100         ;//         <o.0..4> WAITWR: Write wait states <2-33> <#
                       -2>
 1015 00000100         ;//           <i> The delay is in CCLK cycles
 1016 00000100         ;//       </h>
 1017 00000100 0000001F 
                       EMC_STA_WWR3_Val
                               EQU              0x0000001F
 1018 00000100         
 1019 00000100         ;//       <h> Static Memory Turn Round Delay Register (E
                       MCStaticWaitTurn3)
 1020 00000100         ;//         <i> Selects the number of bus turnaround cyc
                       les for CS3
 1021 00000100         ;//         <o.0..4> WAITTURN: Bus turnaround cycles <1-
                       16> <#-1>
 1022 00000100         ;//           <i> The delay is in CCLK cycles
 1023 00000100         ;//       </h>
 1024 00000100 0000000F 
                       EMC_STA_WTURN3_Val
                               EQU              0x0000000F
 1025 00000100         
 1026 00000100         ;//     </e> End of Static Setup for Static CS3 Area
 1027 00000100         
 1028 00000100         ;//     <h> Static Memory Extended Wait Register (EMCSta
                       ticExtendedWait)
 1029 00000100         ;//       <i> Time long static memory read and write tra
                       nsfers
 1030 00000100         ;//       <o.0..9> EXTENDEDWAIT: Extended wait time out 
                       <0-1023>
 1031 00000100         ;//         <i> The delay is in (16 * CCLK) cycles
 1032 00000100         ;//     </h>
 1033 00000100 00000000 
                       EMC_STA_EXT_W_Val
                               EQU              0x00000000
 1034 00000100         
 1035 00000100         ;//   </e> End of Static Setup
 1036 00000100         
 1037 00000100         ;// </e> End of EMC Setup
 1038 00000100         
 1039 00000100         
 1040 00000100                 PRESERVE8
 1041 00000100         
 1042 00000100         ; Area Definition and Entry Point



ARM Macro Assembler    Page 31 


 1043 00000100         ;  Startup Code must be linked first at Address at which
                        it expects to run.
 1044 00000100         
 1045 00000100                 AREA             RESET, CODE, READONLY
 1046 00000000                 ARM
 1047 00000000         
 1048 00000000         
 1049 00000000         ; Exception Vectors
 1050 00000000         ;  Mapped to Address 0.
 1051 00000000         ;  Absolute addressing mode must be used.
 1052 00000000         ;  Dummy Handlers are implemented as infinite loops whic
                       h can be modified.
 1053 00000000         
 1054 00000000 E59FF018 
                       Vectors LDR              PC, Reset_Addr
 1055 00000004 E59FF018        LDR              PC, Undef_Addr
 1056 00000008 E59FF018        LDR              PC, SWI_Addr
 1057 0000000C E59FF018        LDR              PC, PAbt_Addr
 1058 00000010 E59FF018        LDR              PC, DAbt_Addr
 1059 00000014 E1A00000        NOP                          ; Reserved Vector 
 1060 00000018         ;               LDR     PC, IRQ_Addr
 1061 00000018 E51FF120        LDR              PC, [PC, #-0x0120] ; Vector fro
                                                            m VicVectAddr
 1062 0000001C E59FF018        LDR              PC, FIQ_Addr
 1063 00000020         
 1064 00000020 00000000 
                       Reset_Addr
                               DCD              Reset_Handler
 1065 00000024 00000000 
                       Undef_Addr
                               DCD              Undef_Handler
 1066 00000028 00000000 
                       SWI_Addr
                               DCD              SWI_Handler
 1067 0000002C 00000000 
                       PAbt_Addr
                               DCD              PAbt_Handler
 1068 00000030 00000000 
                       DAbt_Addr
                               DCD              DAbt_Handler
 1069 00000034 00000000        DCD              0           ; Reserved Address 
                                                            
 1070 00000038 00000000 
                       IRQ_Addr
                               DCD              IRQ_Handler
 1071 0000003C 00000000 
                       FIQ_Addr
                               DCD              FIQ_Handler
 1072 00000040         
 1073 00000040 EAFFFFFE 
                       Undef_Handler
                               B                Undef_Handler
 1074 00000044 EAFFFFFE 
                       SWI_Handler
                               B                SWI_Handler
 1075 00000048 EAFFFFFE 
                       PAbt_Handler
                               B                PAbt_Handler
 1076 0000004C EAFFFFFE 



ARM Macro Assembler    Page 32 


                       DAbt_Handler
                               B                DAbt_Handler
 1077 00000050 EAFFFFFE 
                       IRQ_Handler
                               B                IRQ_Handler
 1078 00000054 EAFFFFFE 
                       FIQ_Handler
                               B                FIQ_Handler
 1079 00000058         
 1080 00000058         
 1081 00000058         ; Reset Handler
 1082 00000058         
 1083 00000058                 EXPORT           Reset_Handler
 1084 00000058         Reset_Handler
 1085 00000058         
 1086 00000058         
 1087 00000058         ; Clock Setup ------------------------------------------
                       ------------------------
 1088 00000058         
 1089 00000058                 IF               (:LNOT:(:DEF:NO_CLOCK_SETUP)):L
AND:(CLOCK_SETUP != 0)
 1090 00000058 E59F02A0        LDR              R0, =SCB_BASE
 1091 0000005C E3A010AA        MOV              R1, #0xAA
 1092 00000060 E3A02055        MOV              R2, #0x55
 1093 00000064         
 1094 00000064         ;  Configure and Enable PLL
 1095 00000064 E3A03000        LDR              R3, =SCS_Val ; Enable main osci
                                                            llator
 1096 00000068 E58031A0        STR              R3, [R0, #SCS_OFS]
 1097 0000006C         
 1098 0000006C                 IF               (SCS_Val:AND:OSCEN) != 0
 1102                          ENDIF
 1103 0000006C         
 1104 0000006C E3A03000        LDR              R3, =CLKSRCSEL_Val ; Select PLL
                                                             source clock
 1105 00000070 E580310C        STR              R3, [R0, #CLKSRCSEL_OFS]
 1106 00000074 E3A0302F        LDR              R3, =PLLCFG_Val
 1107 00000078 E5803084        STR              R3, [R0, #PLLCFG_OFS]
 1108 0000007C E580108C        STR              R1, [R0, #PLLFEED_OFS]
 1109 00000080 E580208C        STR              R2, [R0, #PLLFEED_OFS]
 1110 00000084 E3A03001        MOV              R3, #PLLCON_PLLE
 1111 00000088 E5803080        STR              R3, [R0, #PLLCON_OFS]
 1112 0000008C E580108C        STR              R1, [R0, #PLLFEED_OFS]
 1113 00000090 E580208C        STR              R2, [R0, #PLLFEED_OFS]
 1114 00000094         
 1115 00000094                 IF               (CLKSRCSEL_Val:AND:3) != 2
 1116 00000094         ;  Wait until PLL Locked (if source is not RTC oscillato
                       r)
 1117 00000094 E5903088 
                       PLL_Loop
                               LDR              R3, [R0, #PLLSTAT_OFS]
 1118 00000098 E2133301        ANDS             R3, R3, #PLLSTAT_PLOCK
 1119 0000009C 0AFFFFFC        BEQ              PLL_Loop
 1120 000000A0                 ELSE
 1125                          ENDIF
 1126 000000A0         
 1127 000000A0 E5903088 
                       M_N_Lock
                               LDR              R3, [R0, #PLLSTAT_OFS]



ARM Macro Assembler    Page 33 


 1128 000000A4 E59F4258        LDR              R4, =(PLLSTAT_M:OR:PLLSTAT_N)
 1129 000000A8 E0033004        AND              R3, R3, R4
 1130 000000AC E3A0402F        LDR              R4, =PLLCFG_Val
 1131 000000B0 E0333004        EORS             R3, R3, R4
 1132 000000B4 1AFFFFF9        BNE              M_N_Lock
 1133 000000B8         
 1134 000000B8         ;  Setup CPU clock divider
 1135 000000B8 E3A03005        MOV              R3, #CCLKCFG_Val
 1136 000000BC E5803104        STR              R3, [R0, #CCLKCFG_OFS]
 1137 000000C0         
 1138 000000C0         ;  Setup USB clock divider
 1139 000000C0 E3A03005        LDR              R3, =USBCLKCFG_Val
 1140 000000C4 E5803108        STR              R3, [R0, #USBCLKCFG_OFS]
 1141 000000C8         
 1142 000000C8         ;  Setup Peripheral Clock
 1143 000000C8 E3A03000        LDR              R3, =PCLKSEL0_Val
 1144 000000CC E58031A8        STR              R3, [R0, #PCLKSEL0_OFS]
 1145 000000D0 E3A03000        LDR              R3, =PCLKSEL1_Val
 1146 000000D4 E58031AC        STR              R3, [R0, #PCLKSEL1_OFS]
 1147 000000D8         
 1148 000000D8         ;  Switch to PLL Clock
 1149 000000D8 E3A03003        MOV              R3, #(PLLCON_PLLE:OR:PLLCON_PLL
C)
 1150 000000DC E5803080        STR              R3, [R0, #PLLCON_OFS]
 1151 000000E0 E580108C        STR              R1, [R0, #PLLFEED_OFS]
 1152 000000E4 E580208C        STR              R2, [R0, #PLLFEED_OFS]
 1153 000000E8                 ENDIF                        ; CLOCK_SETUP
 1154 000000E8         
 1155 000000E8         
 1156 000000E8         ; Setup Memory Accelerator Module ----------------------
                       ------------------------
 1157 000000E8         
 1158 000000E8                 IF               MAM_SETUP != 0
 1159 000000E8 E59F0210        LDR              R0, =MAM_BASE
 1160 000000EC E3A01004        MOV              R1, #MAMTIM_Val
 1161 000000F0 E5801004        STR              R1, [R0, #MAMTIM_OFS]
 1162 000000F4 E3A01002        MOV              R1, #MAMCR_Val
 1163 000000F8 E5801000        STR              R1, [R0, #MAMCR_OFS]
 1164 000000FC                 ENDIF                        ; MAM_SETUP
 1165 000000FC         
 1166 000000FC         
 1167 000000FC         ; Setup External Memory Controller ---------------------
                       ------------------------
 1168 000000FC         
 1169 000000FC                 IF               (:LNOT:(:DEF:NO_EMC_SETUP)):LAN
D:(EMC_SETUP != 0)
 1170 000000FC E59F0204        LDR              R0, =EMC_BASE
 1171 00000100 E59F11F8        LDR              R1, =SCB_BASE
 1172 00000104 E59F2200        LDR              R2, =PCB_BASE
 1173 00000108         
 1174 00000108 E3A04B02        LDR              R4, =EMC_PCONP_Const 
                                                            ; Enable EMC
 1175 0000010C E59130C4        LDR              R3, [R1, #PCONP_OFS]
 1176 00000110 E1844003        ORR              R4, R4, R3
 1177 00000114 E58140C4        STR              R4, [R1, #PCONP_OFS]
 1178 00000118         
 1179 00000118 E3A04001        LDR              R4, =EMC_CTRL_Val
 1180 0000011C E5804000        STR              R4, [R0, #EMC_CTRL_OFS]
 1181 00000120 E3A04000        LDR              R4, =EMC_CONFIG_Val



ARM Macro Assembler    Page 34 


 1182 00000124 E5804008        STR              R4, [R0, #EMC_CONFIG_OFS]
 1183 00000128         
 1184 00000128         ;  Setup pin functions for External Bus functionality
 1185 00000128 E59F41E0        LDR              R4, =EMC_PINSEL5_Val
 1186 0000012C E5824014        STR              R4, [R2, #PINSEL5_OFS]
 1187 00000130 E59F41DC        LDR              R4, =EMC_PINSEL6_Val
 1188 00000134 E5824018        STR              R4, [R2, #PINSEL6_OFS]
 1189 00000138 E59F41D4        LDR              R4, =EMC_PINSEL7_Val
 1190 0000013C E582401C        STR              R4, [R2, #PINSEL7_OFS]
 1191 00000140 E59F41CC        LDR              R4, =EMC_PINSEL8_Val
 1192 00000144 E5824020        STR              R4, [R2, #PINSEL8_OFS]
 1193 00000148 E59F41C8        LDR              R4, =EMC_PINSEL9_Val
 1194 0000014C E5824024        STR              R4, [R2, #PINSEL9_OFS]
 1195 00000150         
 1196 00000150         ;  Setup Dynamic Memory Interface
 1197 00000150                 IF               (EMC_DYNAMIC_SETUP != 0)
 1198 00000150         
 1199 00000150 E3A04002        LDR              R4, =EMC_DYN_RP_Val
 1200 00000154 E5804030        STR              R4, [R0, #EMC_DYN_RP_OFS]
 1201 00000158 E3A04003        LDR              R4, =EMC_DYN_RAS_Val
 1202 0000015C E5804034        STR              R4, [R0, #EMC_DYN_RAS_OFS]
 1203 00000160 E3A04007        LDR              R4, =EMC_DYN_SREX_Val
 1204 00000164 E5804038        STR              R4, [R0, #EMC_DYN_SREX_OFS]
 1205 00000168 E3A04002        LDR              R4, =EMC_DYN_APR_Val
 1206 0000016C E580403C        STR              R4, [R0, #EMC_DYN_APR_OFS]
 1207 00000170 E3A04005        LDR              R4, =EMC_DYN_DAL_Val
 1208 00000174 E5804040        STR              R4, [R0, #EMC_DYN_DAL_OFS]
 1209 00000178 E3A04001        LDR              R4, =EMC_DYN_WR_Val
 1210 0000017C E5804044        STR              R4, [R0, #EMC_DYN_WR_OFS]
 1211 00000180 E3A04005        LDR              R4, =EMC_DYN_RC_Val
 1212 00000184 E5804048        STR              R4, [R0, #EMC_DYN_RC_OFS]
 1213 00000188 E3A04005        LDR              R4, =EMC_DYN_RFC_Val
 1214 0000018C E580404C        STR              R4, [R0, #EMC_DYN_RFC_OFS]
 1215 00000190 E3A04007        LDR              R4, =EMC_DYN_XSR_Val
 1216 00000194 E5804050        STR              R4, [R0, #EMC_DYN_XSR_OFS]
 1217 00000198 E3A04001        LDR              R4, =EMC_DYN_RRD_Val
 1218 0000019C E5804054        STR              R4, [R0, #EMC_DYN_RRD_OFS]
 1219 000001A0 E3A04002        LDR              R4, =EMC_DYN_MRD_Val
 1220 000001A4 E5804058        STR              R4, [R0, #EMC_DYN_MRD_OFS]
 1221 000001A8         
 1222 000001A8 E3A04001        LDR              R4, =EMC_DYN_RD_CFG_Val
 1223 000001AC E5804028        STR              R4, [R0, #EMC_DYN_RD_CFG_OFS]
 1224 000001B0         
 1225 000001B0                 IF               (EMC_DYNCS0_SETUP != 0)
 1226 000001B0 E59F4164        LDR              R4, =EMC_DYN_RASCAS0_Val
 1227 000001B4 E5804104        STR              R4, [R0, #EMC_DYN_RASCAS0_OFS]
 1228 000001B8 E59F4160        LDR              R4, =EMC_DYN_CFG0_Val
 1229 000001BC E3E05702        MVN              R5, #BUFEN_Const
 1230 000001C0 E0044005        AND              R4, R4, R5
 1231 000001C4 E5804100        STR              R4, [R0, #EMC_DYN_CFG0_OFS]
 1232 000001C8                 ENDIF
 1233 000001C8                 IF               (EMC_DYNCS1_SETUP != 0)
 1240                          ENDIF
 1241 000001C8                 IF               (EMC_DYNCS2_SETUP != 0)
 1248                          ENDIF
 1249 000001C8                 IF               (EMC_DYNCS3_SETUP != 0)
 1256                          ENDIF
 1257 000001C8         
 1258 000001C8 E59F6154        LDR              R6, =1440000 ; Number of cycles



ARM Macro Assembler    Page 35 


                                                             to delay
 1259 000001CC E2566001 
                       Wait_0  SUBS             R6, R6, #1  ; Delay ~100 ms pro
                                                            c clk 57.6 MHz
 1260 000001D0 1AFFFFFD        BNE              Wait_0      ; BNE (3 cyc) + SUB
                                                            S (1 cyc) = 4 cyc
 1261 000001D4         
 1262 000001D4 E59F414C        LDR              R4, =(NOP_CMD:OR:0x03) 
                                                            ; Write NOP Command
                                                            
 1263 000001D8 E5804020        STR              R4, [R0, #EMC_DYN_CTRL_OFS]
 1264 000001DC         
 1265 000001DC E59F6148        LDR              R6, =2880000 ; Number of cycles
                                                             to delay
 1266 000001E0 E2566001 
                       Wait_1  SUBS             R6, R6, #1  ; Delay ~200 ms pro
                                                            c clk 57.6 MHz
 1267 000001E4 1AFFFFFD        BNE              Wait_1
 1268 000001E8         
 1269 000001E8 E59F4140        LDR              R4, =(PALL_CMD:OR:0x03) ; Write
                                                             Precharge All Comm
                                                            and
 1270 000001EC E5804020        STR              R4, [R0, #EMC_DYN_CTRL_OFS]
 1271 000001F0         
 1272 000001F0 E3A04002        MOV              R4, #2
 1273 000001F4 E5804024        STR              R4, [R0, #EMC_DYN_RFSH_OFS]
 1274 000001F8         
 1275 000001F8 E3A06040        MOV              R6, #64     ; Number of cycles 
                                                            to delay
 1276 000001FC E2566001 
                       Wait_2  SUBS             R6, R6, #1  ; Delay
 1277 00000200 1AFFFFFD        BNE              Wait_2
 1278 00000204         
 1279 00000204 E3A0401C        LDR              R4, =EMC_DYN_RFSH_Val
 1280 00000208 E5804024        STR              R4, [R0, #EMC_DYN_RFSH_OFS]
 1281 0000020C         
 1282 0000020C E3A04083        LDR              R4, =(MODE_CMD:OR:0x03) ; Write
                                                             MODE Command
 1283 00000210 E5804020        STR              R4, [R0, #EMC_DYN_CTRL_OFS]
 1284 00000214         
 1285 00000214         ; Dummy read  (set SDRAM Mode register)
 1286 00000214                 IF               (EMC_DYNCS0_SETUP != 0)
 1287 00000214 E3A0420A        LDR              R4, =DYN_MEM0_BASE
 1288 00000218 E3A05C03        LDR              R5, =(EMC_DYN_RASCAS0_Val:AND:0
x00000300) 
                                                            ; get CAS Latency
 1289 0000021C E1A05225        LSR              R5, #4      ; set CAS Latency  
                                                              (Bit4..6)
 1290 00000220                 IF               ((EMC_DYN_CFG0_Val:AND:0x000040
00) != 0)
 1294 00000220 E3855003        ORR              R5, R5, #0x03 ; set burst lengt
                                                            h 8 (Bit0..2)
 1295 00000224 E1A05605        LSL              R5, #12
 1296 00000228                 ENDIF
 1297 00000228 E0844005        ADD              R4, R4, R5
 1298 0000022C E5944000        LDR              R4, [R4, #0]
 1299 00000230                 ENDIF
 1300 00000230                 IF               (EMC_DYNCS1_SETUP != 0)
 1313                          ENDIF



ARM Macro Assembler    Page 36 


 1314 00000230                 IF               (EMC_DYNCS2_SETUP != 0)
 1327                          ENDIF
 1328 00000230                 IF               (EMC_DYNCS3_SETUP != 0)
 1341                          ENDIF
 1342 00000230         
 1343 00000230 E3A04000        LDR              R4, =NORMAL_CMD ; Write NORMAL 
                                                            Command
 1344 00000234 E5804020        STR              R4, [R0, #EMC_DYN_CTRL_OFS]
 1345 00000238         
 1346 00000238         ; Enable buffer if requested by settings
 1347 00000238                 IF               (EMC_DYNCS0_SETUP != 0):LAND:((
EMC_DYN_CFG0_Val:AND:BUFEN_Const) != 0)
 1348 00000238 E59F40E0        LDR              R4, =EMC_DYN_CFG0_Val
 1349 0000023C E5804100        STR              R4, [R0, #EMC_DYN_CFG0_OFS]
 1350 00000240                 ENDIF
 1351 00000240                 IF               (EMC_DYNCS1_SETUP != 0):LAND:((
EMC_DYN_CFG1_Val:AND:BUFEN_Const) != 0)
 1354                          ENDIF
 1355 00000240                 IF               (EMC_DYNCS2_SETUP != 0):LAND:((
EMC_DYN_CFG2_Val:AND:BUFEN_Const) != 0)
 1358                          ENDIF
 1359 00000240                 IF               (EMC_DYNCS3_SETUP != 0):LAND:((
EMC_DYN_CFG3_Val:AND:BUFEN_Const) != 0)
 1362                          ENDIF
 1363 00000240         
 1364 00000240 E3A06DE1        LDR              R6, =14400  ; Number of cycles 
                                                            to delay
 1365 00000244 E2566001 
                       Wait_3  SUBS             R6, R6, #1  ; Delay ~1 ms @ pro
                                                            c clk 57.6 MHz
 1366 00000248 1AFFFFFD        BNE              Wait_3
 1367 0000024C         
 1368 0000024C                 ENDIF                        ; EMC_DYNAMIC_SETUP
                                                            
 1369 0000024C         
 1370 0000024C         ;  Setup Static Memory Interface
 1371 0000024C                 IF               (EMC_STATIC_SETUP != 0)
 1372 0000024C         
 1373 0000024C E59F60D0        LDR              R6, =1440000 ; Number of cycles
                                                             to delay
 1374 00000250 E2566001 
                       Wait_4  SUBS             R6, R6, #1  ; Delay ~100 ms @ p
                                                            roc clk 57.6 MHz
 1375 00000254 1AFFFFFD        BNE              Wait_4
 1376 00000258         
 1377 00000258                 IF               (EMC_STACS0_SETUP != 0)
 1378 00000258 E3A04081        LDR              R4, =EMC_STA_CFG0_Val
 1379 0000025C E5804200        STR              R4, [R0, #EMC_STA_CFG0_OFS]
 1380 00000260 E3A04002        LDR              R4, =EMC_STA_WWEN0_Val
 1381 00000264 E5804204        STR              R4, [R0, #EMC_STA_WWEN0_OFS]
 1382 00000268 E3A04002        LDR              R4, =EMC_STA_WOEN0_Val
 1383 0000026C E5804208        STR              R4, [R0, #EMC_STA_WOEN0_OFS]
 1384 00000270 E3A0401F        LDR              R4, =EMC_STA_WRD0_Val
 1385 00000274 E580420C        STR              R4, [R0, #EMC_STA_WRD0_OFS]
 1386 00000278 E3A0401F        LDR              R4, =EMC_STA_WPAGE0_Val
 1387 0000027C E5804210        STR              R4, [R0, #EMC_STA_WPAGE0_OFS]
 1388 00000280 E3A0401F        LDR              R4, =EMC_STA_WWR0_Val
 1389 00000284 E5804214        STR              R4, [R0, #EMC_STA_WWR0_OFS]
 1390 00000288 E3A0400F        LDR              R4, =EMC_STA_WTURN0_Val



ARM Macro Assembler    Page 37 


 1391 0000028C E5804218        STR              R4, [R0, #EMC_STA_WTURN0_OFS]
 1392 00000290                 ENDIF
 1393 00000290         
 1394 00000290                 IF               (EMC_STACS1_SETUP != 0)
 1409                          ENDIF
 1410 00000290         
 1411 00000290                 IF               (EMC_STACS2_SETUP != 0)
 1426                          ENDIF
 1427 00000290         
 1428 00000290                 IF               (EMC_STACS3_SETUP != 0)
 1443                          ENDIF
 1444 00000290         
 1445 00000290 E59F609C        LDR              R6, =144000 ; Number of cycles 
                                                            to delay
 1446 00000294 E2566001 
                       Wait_5  SUBS             R6, R6, #1  ; Delay ~10 ms @ pr
                                                            oc clk 57.6 MHz
 1447 00000298 1AFFFFFD        BNE              Wait_5
 1448 0000029C         
 1449 0000029C E3A04000        LDR              R4, =EMC_STA_EXT_W_Val
 1450 000002A0 E3A05D22        LDR              R5, =EMC_STA_EXT_W_OFS
 1451 000002A4 E0855000        ADD              R5, R5, R0
 1452 000002A8 E5854000        STR              R4, [R5, #0]
 1453 000002AC         
 1454 000002AC                 ENDIF                        ; EMC_STATIC_SETUP 
                                                            
 1455 000002AC         
 1456 000002AC                 ENDIF                        ; EMC_SETUP
 1457 000002AC         
 1458 000002AC         
 1459 000002AC         ; Copy Exception Vectors to Internal RAM ---------------
                       ------------------------
 1460 000002AC         
 1461 000002AC                 IF               :DEF:RAM_INTVEC
 1468                          ENDIF
 1469 000002AC         
 1470 000002AC         
 1471 000002AC         ; Memory Mapping (when Interrupt Vectors are in RAM) ---
                       ------------------------
 1472 000002AC         
 1473 000002AC E01FC040 
                       MEMMAP  EQU              0xE01FC040  ; Memory Mapping Co
                                                            ntrol
 1474 000002AC                 IF               :DEF:REMAP
 1484                          ENDIF
 1485 000002AC         
 1486 000002AC         
 1487 000002AC         ; Setup Stack for each mode ----------------------------
                       ------------------------
 1488 000002AC         
 1489 000002AC E59F0084        LDR              R0, =Stack_Top
 1490 000002B0         
 1491 000002B0         ;  Enter Undefined Instruction Mode and set its Stack Po
                       inter
 1492 000002B0 E321F0DB        MSR              CPSR_c, #Mode_UND:OR:I_Bit:OR:F
_Bit
 1493 000002B4 E1A0D000        MOV              SP, R0
 1494 000002B8 E2400000        SUB              R0, R0, #UND_Stack_Size
 1495 000002BC         



ARM Macro Assembler    Page 38 


 1496 000002BC         ;  Enter Abort Mode and set its Stack Pointer
 1497 000002BC E321F0D7        MSR              CPSR_c, #Mode_ABT:OR:I_Bit:OR:F
_Bit
 1498 000002C0 E1A0D000        MOV              SP, R0
 1499 000002C4 E2400000        SUB              R0, R0, #ABT_Stack_Size
 1500 000002C8         
 1501 000002C8         ;  Enter FIQ Mode and set its Stack Pointer
 1502 000002C8 E321F0D1        MSR              CPSR_c, #Mode_FIQ:OR:I_Bit:OR:F
_Bit
 1503 000002CC E1A0D000        MOV              SP, R0
 1504 000002D0 E2400000        SUB              R0, R0, #FIQ_Stack_Size
 1505 000002D4         
 1506 000002D4         ;  Enter IRQ Mode and set its Stack Pointer
 1507 000002D4 E321F0D2        MSR              CPSR_c, #Mode_IRQ:OR:I_Bit:OR:F
_Bit
 1508 000002D8 E1A0D000        MOV              SP, R0
 1509 000002DC E2400C01        SUB              R0, R0, #IRQ_Stack_Size
 1510 000002E0         
 1511 000002E0         ;  Enter Supervisor Mode and set its Stack Pointer
 1512 000002E0 E321F0D3        MSR              CPSR_c, #Mode_SVC:OR:I_Bit:OR:F
_Bit
 1513 000002E4 E1A0D000        MOV              SP, R0
 1514 000002E8 E2400008        SUB              R0, R0, #SVC_Stack_Size
 1515 000002EC         
 1516 000002EC         ;  Enter User Mode and set its Stack Pointer
 1517 000002EC E321F010        MSR              CPSR_c, #Mode_USR
 1518 000002F0                 IF               :DEF:__MICROLIB
 1523 000002F0         
 1524 000002F0 E1A0D000        MOV              SP, R0
 1525 000002F4 E24DAB01        SUB              SL, SP, #USR_Stack_Size
 1526 000002F8         
 1527 000002F8                 ENDIF
 1528 000002F8         
 1529 000002F8         ; Enter the C code -------------------------------------
                       ------------------------
 1530 000002F8         
 1531 000002F8                 IMPORT           __main
 1532 000002F8 E59F003C        LDR              R0, =__main
 1533 000002FC E12FFF10        BX               R0
 1534 00000300         
 1535 00000300         
 1536 00000300                 IF               :DEF:__MICROLIB
 1542 00000300         ; User Initial Stack & Heap
 1543 00000300 E01FC000 
              00FF7FFF 
              FFE08000 
              E002C000 
              55010115 
              55555555 
              50055555 
              00000303 
              00080680 
              0015F900 
              00000183 
              002BF200 
              00000103 
              00023280 
              00000000 
              00000000         AREA             |.text|, CODE, READONLY



ARM Macro Assembler    Page 39 


 1544 00000000         
 1545 00000000                 IMPORT           __use_two_region_memory
 1546 00000000                 EXPORT           __user_initial_stackheap
 1547 00000000         __user_initial_stackheap
 1548 00000000         
 1549 00000000 E59F000C        LDR              R0, =  Heap_Mem
 1550 00000004 E59F100C        LDR              R1, =(Stack_Mem + USR_Stack_Siz
e)
 1551 00000008 E59F200C        LDR              R2, = (Heap_Mem +      Heap_Siz
e)
 1552 0000000C E59F300C        LDR              R3, = Stack_Mem
 1553 00000010 E12FFF1E        BX               LR
 1554 00000014                 ENDIF
 1555 00000014         
 1556 00000014         
 1557 00000014                 END
              00000000 
              00000400 
              00000100 
              00000000 
Command Line: --debug --xref --device=DARMP --apcs=interwork -oStartup.s.o -IC:
\Keil\ARM\INC\Philips --predefine="__EVAL SETA 1" --list=Startup.s.lst Startup.
s.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 96 in file Startup.s.s
   Uses
      None
Comment: STACK unused
Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 98 in file Startup.s.s
   Uses
      At line 1550 in file Startup.s.s
      At line 1552 in file Startup.s.s

Stack_Top 00000508

Symbol: Stack_Top
   Definitions
      At line 101 in file Startup.s.s
   Uses
      At line 1489 in file Startup.s.s
Comment: Stack_Top used once
__initial_sp 00000400

Symbol: __initial_sp
   Definitions
      At line 99 in file Startup.s.s
   Uses
      None
Comment: __initial_sp unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HEAP 00000000

Symbol: HEAP
   Definitions
      At line 110 in file Startup.s.s
   Uses
      None
Comment: HEAP unused
Heap_Mem 00000000

Symbol: Heap_Mem
   Definitions
      At line 112 in file Startup.s.s
   Uses
      At line 1549 in file Startup.s.s
      At line 1551 in file Startup.s.s

__heap_base 00000000

Symbol: __heap_base
   Definitions
      At line 111 in file Startup.s.s
   Uses
      None
Comment: __heap_base unused
__heap_limit 00000100

Symbol: __heap_limit
   Definitions
      At line 113 in file Startup.s.s
   Uses
      None
Comment: __heap_limit unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DAbt_Addr 00000030

Symbol: DAbt_Addr
   Definitions
      At line 1068 in file Startup.s.s
   Uses
      At line 1058 in file Startup.s.s
Comment: DAbt_Addr used once
DAbt_Handler 0000004C

Symbol: DAbt_Handler
   Definitions
      At line 1076 in file Startup.s.s
   Uses
      At line 1068 in file Startup.s.s
      At line 1076 in file Startup.s.s

FIQ_Addr 0000003C

Symbol: FIQ_Addr
   Definitions
      At line 1071 in file Startup.s.s
   Uses
      At line 1062 in file Startup.s.s
Comment: FIQ_Addr used once
FIQ_Handler 00000054

Symbol: FIQ_Handler
   Definitions
      At line 1078 in file Startup.s.s
   Uses
      At line 1071 in file Startup.s.s
      At line 1078 in file Startup.s.s

IRQ_Addr 00000038

Symbol: IRQ_Addr
   Definitions
      At line 1070 in file Startup.s.s
   Uses
      None
Comment: IRQ_Addr unused
IRQ_Handler 00000050

Symbol: IRQ_Handler
   Definitions
      At line 1077 in file Startup.s.s
   Uses
      At line 1070 in file Startup.s.s
      At line 1077 in file Startup.s.s

M_N_Lock 000000A0

Symbol: M_N_Lock
   Definitions
      At line 1127 in file Startup.s.s
   Uses
      At line 1132 in file Startup.s.s
Comment: M_N_Lock used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

PAbt_Addr 0000002C

Symbol: PAbt_Addr
   Definitions
      At line 1067 in file Startup.s.s
   Uses
      At line 1057 in file Startup.s.s
Comment: PAbt_Addr used once
PAbt_Handler 00000048

Symbol: PAbt_Handler
   Definitions
      At line 1075 in file Startup.s.s
   Uses
      At line 1067 in file Startup.s.s
      At line 1075 in file Startup.s.s

PLL_Loop 00000094

Symbol: PLL_Loop
   Definitions
      At line 1117 in file Startup.s.s
   Uses
      At line 1119 in file Startup.s.s
Comment: PLL_Loop used once
RESET 00000000

Symbol: RESET
   Definitions
      At line 1045 in file Startup.s.s
   Uses
      None
Comment: RESET unused
Reset_Addr 00000020

Symbol: Reset_Addr
   Definitions
      At line 1064 in file Startup.s.s
   Uses
      At line 1054 in file Startup.s.s
Comment: Reset_Addr used once
Reset_Handler 00000058

Symbol: Reset_Handler
   Definitions
      At line 1084 in file Startup.s.s
   Uses
      At line 1064 in file Startup.s.s
      At line 1083 in file Startup.s.s

SWI_Addr 00000028

Symbol: SWI_Addr
   Definitions
      At line 1066 in file Startup.s.s
   Uses
      At line 1056 in file Startup.s.s
Comment: SWI_Addr used once
SWI_Handler 00000044



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: SWI_Handler
   Definitions
      At line 1074 in file Startup.s.s
   Uses
      At line 1066 in file Startup.s.s
      At line 1074 in file Startup.s.s

Undef_Addr 00000024

Symbol: Undef_Addr
   Definitions
      At line 1065 in file Startup.s.s
   Uses
      At line 1055 in file Startup.s.s
Comment: Undef_Addr used once
Undef_Handler 00000040

Symbol: Undef_Handler
   Definitions
      At line 1073 in file Startup.s.s
   Uses
      At line 1065 in file Startup.s.s
      At line 1073 in file Startup.s.s

Vectors 00000000

Symbol: Vectors
   Definitions
      At line 1054 in file Startup.s.s
   Uses
      None
Comment: Vectors unused
Wait_0 000001CC

Symbol: Wait_0
   Definitions
      At line 1259 in file Startup.s.s
   Uses
      At line 1260 in file Startup.s.s
Comment: Wait_0 used once
Wait_1 000001E0

Symbol: Wait_1
   Definitions
      At line 1266 in file Startup.s.s
   Uses
      At line 1267 in file Startup.s.s
Comment: Wait_1 used once
Wait_2 000001FC

Symbol: Wait_2
   Definitions
      At line 1276 in file Startup.s.s
   Uses
      At line 1277 in file Startup.s.s
Comment: Wait_2 used once
Wait_3 00000244




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: Wait_3
   Definitions
      At line 1365 in file Startup.s.s
   Uses
      At line 1366 in file Startup.s.s
Comment: Wait_3 used once
Wait_4 00000250

Symbol: Wait_4
   Definitions
      At line 1374 in file Startup.s.s
   Uses
      At line 1375 in file Startup.s.s
Comment: Wait_4 used once
Wait_5 00000294

Symbol: Wait_5
   Definitions
      At line 1446 in file Startup.s.s
   Uses
      At line 1447 in file Startup.s.s
Comment: Wait_5 used once
24 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1543 in file Startup.s.s
   Uses
      None
Comment: .text unused
__user_initial_stackheap 00000000

Symbol: __user_initial_stackheap
   Definitions
      At line 1547 in file Startup.s.s
   Uses
      At line 1546 in file Startup.s.s
Comment: __user_initial_stackheap used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ABT_Stack_Size 00000000

Symbol: ABT_Stack_Size
   Definitions
      At line 88 in file Startup.s.s
   Uses
      At line 94 in file Startup.s.s
      At line 1499 in file Startup.s.s

BUFEN_Const 00080000

Symbol: BUFEN_Const
   Definitions
      At line 444 in file Startup.s.s
   Uses
      At line 1229 in file Startup.s.s
      At line 1347 in file Startup.s.s
      At line 1351 in file Startup.s.s
      At line 1355 in file Startup.s.s
      At line 1359 in file Startup.s.s

CCLKCFG_OFS 00000104

Symbol: CCLKCFG_OFS
   Definitions
      At line 124 in file Startup.s.s
   Uses
      At line 1136 in file Startup.s.s
Comment: CCLKCFG_OFS used once
CCLKCFG_Val 00000005

Symbol: CCLKCFG_Val
   Definitions
      At line 335 in file Startup.s.s
   Uses
      At line 1135 in file Startup.s.s
Comment: CCLKCFG_Val used once
CLKSRCSEL_OFS 0000010C

Symbol: CLKSRCSEL_OFS
   Definitions
      At line 126 in file Startup.s.s
   Uses
      At line 1105 in file Startup.s.s
Comment: CLKSRCSEL_OFS used once
CLKSRCSEL_Val 00000000

Symbol: CLKSRCSEL_Val
   Definitions
      At line 333 in file Startup.s.s
   Uses
      At line 1104 in file Startup.s.s
      At line 1115 in file Startup.s.s

CLOCK_SETUP 00000001

Symbol: CLOCK_SETUP
   Definitions
      At line 331 in file Startup.s.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 1089 in file Startup.s.s
Comment: CLOCK_SETUP used once
DYN_MEM0_BASE A0000000

Symbol: DYN_MEM0_BASE
   Definitions
      At line 69 in file Startup.s.s
   Uses
      At line 1287 in file Startup.s.s
Comment: DYN_MEM0_BASE used once
DYN_MEM1_BASE B0000000

Symbol: DYN_MEM1_BASE
   Definitions
      At line 70 in file Startup.s.s
   Uses
      None
Comment: DYN_MEM1_BASE unused
DYN_MEM2_BASE C0000000

Symbol: DYN_MEM2_BASE
   Definitions
      At line 71 in file Startup.s.s
   Uses
      None
Comment: DYN_MEM2_BASE unused
DYN_MEM3_BASE D0000000

Symbol: DYN_MEM3_BASE
   Definitions
      At line 72 in file Startup.s.s
   Uses
      None
Comment: DYN_MEM3_BASE unused
EMC_BASE FFE08000

Symbol: EMC_BASE
   Definitions
      At line 381 in file Startup.s.s
   Uses
      At line 1170 in file Startup.s.s
Comment: EMC_BASE used once
EMC_CONFIG_OFS 00000008

Symbol: EMC_CONFIG_OFS
   Definitions
      At line 385 in file Startup.s.s
   Uses
      At line 1182 in file Startup.s.s
Comment: EMC_CONFIG_OFS used once
EMC_CONFIG_Val 00000000

Symbol: EMC_CONFIG_Val
   Definitions
      At line 476 in file Startup.s.s
   Uses
      At line 1181 in file Startup.s.s
Comment: EMC_CONFIG_Val used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

EMC_CTRL_OFS 00000000

Symbol: EMC_CTRL_OFS
   Definitions
      At line 383 in file Startup.s.s
   Uses
      At line 1180 in file Startup.s.s
Comment: EMC_CTRL_OFS used once
EMC_CTRL_Val 00000001

Symbol: EMC_CTRL_Val
   Definitions
      At line 465 in file Startup.s.s
   Uses
      At line 1179 in file Startup.s.s
Comment: EMC_CTRL_Val used once
EMC_DYNAMIC_SETUP 00000001

Symbol: EMC_DYNAMIC_SETUP
   Definitions
      At line 480 in file Startup.s.s
   Uses
      At line 1197 in file Startup.s.s
Comment: EMC_DYNAMIC_SETUP used once
EMC_DYNCS0_SETUP 00000001

Symbol: EMC_DYNCS0_SETUP
   Definitions
      At line 570 in file Startup.s.s
   Uses
      At line 1225 in file Startup.s.s
      At line 1286 in file Startup.s.s
      At line 1347 in file Startup.s.s

EMC_DYNCS1_SETUP 00000000

Symbol: EMC_DYNCS1_SETUP
   Definitions
      At line 617 in file Startup.s.s
   Uses
      At line 1233 in file Startup.s.s
      At line 1300 in file Startup.s.s
      At line 1351 in file Startup.s.s

EMC_DYNCS2_SETUP 00000000

Symbol: EMC_DYNCS2_SETUP
   Definitions
      At line 663 in file Startup.s.s
   Uses
      At line 1241 in file Startup.s.s
      At line 1314 in file Startup.s.s
      At line 1355 in file Startup.s.s

EMC_DYNCS3_SETUP 00000000

Symbol: EMC_DYNCS3_SETUP
   Definitions
      At line 709 in file Startup.s.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 1249 in file Startup.s.s
      At line 1328 in file Startup.s.s
      At line 1359 in file Startup.s.s

EMC_DYN_APR_OFS 0000003C

Symbol: EMC_DYN_APR_OFS
   Definitions
      At line 392 in file Startup.s.s
   Uses
      At line 1206 in file Startup.s.s
Comment: EMC_DYN_APR_OFS used once
EMC_DYN_APR_Val 00000002

Symbol: EMC_DYN_APR_Val
   Definitions
      At line 560 in file Startup.s.s
   Uses
      At line 1205 in file Startup.s.s
Comment: EMC_DYN_APR_Val used once
EMC_DYN_CFG0_OFS 00000100

Symbol: EMC_DYN_CFG0_OFS
   Definitions
      At line 400 in file Startup.s.s
   Uses
      At line 1231 in file Startup.s.s
      At line 1349 in file Startup.s.s

EMC_DYN_CFG0_Val 00080680

Symbol: EMC_DYN_CFG0_Val
   Definitions
      At line 598 in file Startup.s.s
   Uses
      At line 1228 in file Startup.s.s
      At line 1290 in file Startup.s.s
      At line 1347 in file Startup.s.s
      At line 1348 in file Startup.s.s

EMC_DYN_CFG1_OFS 00000140

Symbol: EMC_DYN_CFG1_OFS
   Definitions
      At line 402 in file Startup.s.s
   Uses
      None
Comment: EMC_DYN_CFG1_OFS unused
EMC_DYN_CFG1_Val 00000000

Symbol: EMC_DYN_CFG1_Val
   Definitions
      At line 645 in file Startup.s.s
   Uses
      At line 1351 in file Startup.s.s
Comment: EMC_DYN_CFG1_Val used once
EMC_DYN_CFG2_OFS 00000160




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

Symbol: EMC_DYN_CFG2_OFS
   Definitions
      At line 404 in file Startup.s.s
   Uses
      None
Comment: EMC_DYN_CFG2_OFS unused
EMC_DYN_CFG2_Val 00000000

Symbol: EMC_DYN_CFG2_Val
   Definitions
      At line 691 in file Startup.s.s
   Uses
      At line 1355 in file Startup.s.s
Comment: EMC_DYN_CFG2_Val used once
EMC_DYN_CFG3_OFS 00000180

Symbol: EMC_DYN_CFG3_OFS
   Definitions
      At line 406 in file Startup.s.s
   Uses
      None
Comment: EMC_DYN_CFG3_OFS unused
EMC_DYN_CFG3_Val 00000000

Symbol: EMC_DYN_CFG3_Val
   Definitions
      At line 737 in file Startup.s.s
   Uses
      At line 1359 in file Startup.s.s
Comment: EMC_DYN_CFG3_Val used once
EMC_DYN_CTRL_OFS 00000020

Symbol: EMC_DYN_CTRL_OFS
   Definitions
      At line 386 in file Startup.s.s
   Uses
      At line 1263 in file Startup.s.s
      At line 1270 in file Startup.s.s
      At line 1283 in file Startup.s.s
      At line 1344 in file Startup.s.s

EMC_DYN_DAL_OFS 00000040

Symbol: EMC_DYN_DAL_OFS
   Definitions
      At line 393 in file Startup.s.s
   Uses
      At line 1208 in file Startup.s.s
Comment: EMC_DYN_DAL_OFS used once
EMC_DYN_DAL_Val 00000005

Symbol: EMC_DYN_DAL_Val
   Definitions
      At line 561 in file Startup.s.s
   Uses
      At line 1207 in file Startup.s.s
Comment: EMC_DYN_DAL_Val used once
EMC_DYN_MRD_OFS 00000058




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

Symbol: EMC_DYN_MRD_OFS
   Definitions
      At line 399 in file Startup.s.s
   Uses
      At line 1220 in file Startup.s.s
Comment: EMC_DYN_MRD_OFS used once
EMC_DYN_MRD_Val 00000002

Symbol: EMC_DYN_MRD_Val
   Definitions
      At line 567 in file Startup.s.s
   Uses
      At line 1219 in file Startup.s.s
Comment: EMC_DYN_MRD_Val used once
EMC_DYN_RASCAS0_OFS 00000104

Symbol: EMC_DYN_RASCAS0_OFS
   Definitions
      At line 401 in file Startup.s.s
   Uses
      At line 1227 in file Startup.s.s
Comment: EMC_DYN_RASCAS0_OFS used once
EMC_DYN_RASCAS0_Val 00000303

Symbol: EMC_DYN_RASCAS0_Val
   Definitions
      At line 611 in file Startup.s.s
   Uses
      At line 1226 in file Startup.s.s
      At line 1288 in file Startup.s.s

EMC_DYN_RASCAS1_OFS 00000144

Symbol: EMC_DYN_RASCAS1_OFS
   Definitions
      At line 403 in file Startup.s.s
   Uses
      None
Comment: EMC_DYN_RASCAS1_OFS unused
EMC_DYN_RASCAS1_Val 00000303

Symbol: EMC_DYN_RASCAS1_Val
   Definitions
      At line 658 in file Startup.s.s
   Uses
      None
Comment: EMC_DYN_RASCAS1_Val unused
EMC_DYN_RASCAS2_OFS 00000164

Symbol: EMC_DYN_RASCAS2_OFS
   Definitions
      At line 405 in file Startup.s.s
   Uses
      None
Comment: EMC_DYN_RASCAS2_OFS unused
EMC_DYN_RASCAS2_Val 00000303

Symbol: EMC_DYN_RASCAS2_Val
   Definitions



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

      At line 704 in file Startup.s.s
   Uses
      None
Comment: EMC_DYN_RASCAS2_Val unused
EMC_DYN_RASCAS3_OFS 00000184

Symbol: EMC_DYN_RASCAS3_OFS
   Definitions
      At line 407 in file Startup.s.s
   Uses
      None
Comment: EMC_DYN_RASCAS3_OFS unused
EMC_DYN_RASCAS3_Val 00000303

Symbol: EMC_DYN_RASCAS3_Val
   Definitions
      At line 750 in file Startup.s.s
   Uses
      None
Comment: EMC_DYN_RASCAS3_Val unused
EMC_DYN_RAS_OFS 00000034

Symbol: EMC_DYN_RAS_OFS
   Definitions
      At line 390 in file Startup.s.s
   Uses
      At line 1202 in file Startup.s.s
Comment: EMC_DYN_RAS_OFS used once
EMC_DYN_RAS_Val 00000003

Symbol: EMC_DYN_RAS_Val
   Definitions
      At line 558 in file Startup.s.s
   Uses
      At line 1201 in file Startup.s.s
Comment: EMC_DYN_RAS_Val used once
EMC_DYN_RC_OFS 00000048

Symbol: EMC_DYN_RC_OFS
   Definitions
      At line 395 in file Startup.s.s
   Uses
      At line 1212 in file Startup.s.s
Comment: EMC_DYN_RC_OFS used once
EMC_DYN_RC_Val 00000005

Symbol: EMC_DYN_RC_Val
   Definitions
      At line 563 in file Startup.s.s
   Uses
      At line 1211 in file Startup.s.s
Comment: EMC_DYN_RC_Val used once
EMC_DYN_RD_CFG_OFS 00000028

Symbol: EMC_DYN_RD_CFG_OFS
   Definitions
      At line 388 in file Startup.s.s
   Uses
      At line 1223 in file Startup.s.s



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Absolute symbols

Comment: EMC_DYN_RD_CFG_OFS used once
EMC_DYN_RD_CFG_Val 00000001

Symbol: EMC_DYN_RD_CFG_Val
   Definitions
      At line 497 in file Startup.s.s
   Uses
      At line 1222 in file Startup.s.s
Comment: EMC_DYN_RD_CFG_Val used once
EMC_DYN_RFC_OFS 0000004C

Symbol: EMC_DYN_RFC_OFS
   Definitions
      At line 396 in file Startup.s.s
   Uses
      At line 1214 in file Startup.s.s
Comment: EMC_DYN_RFC_OFS used once
EMC_DYN_RFC_Val 00000005

Symbol: EMC_DYN_RFC_Val
   Definitions
      At line 564 in file Startup.s.s
   Uses
      At line 1213 in file Startup.s.s
Comment: EMC_DYN_RFC_Val used once
EMC_DYN_RFSH_OFS 00000024

Symbol: EMC_DYN_RFSH_OFS
   Definitions
      At line 387 in file Startup.s.s
   Uses
      At line 1273 in file Startup.s.s
      At line 1280 in file Startup.s.s

EMC_DYN_RFSH_Val 0000001C

Symbol: EMC_DYN_RFSH_Val
   Definitions
      At line 487 in file Startup.s.s
   Uses
      At line 1279 in file Startup.s.s
Comment: EMC_DYN_RFSH_Val used once
EMC_DYN_RP_OFS 00000030

Symbol: EMC_DYN_RP_OFS
   Definitions
      At line 389 in file Startup.s.s
   Uses
      At line 1200 in file Startup.s.s
Comment: EMC_DYN_RP_OFS used once
EMC_DYN_RP_Val 00000002

Symbol: EMC_DYN_RP_Val
   Definitions
      At line 557 in file Startup.s.s
   Uses
      At line 1199 in file Startup.s.s
Comment: EMC_DYN_RP_Val used once
EMC_DYN_RRD_OFS 00000054



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Absolute symbols


Symbol: EMC_DYN_RRD_OFS
   Definitions
      At line 398 in file Startup.s.s
   Uses
      At line 1218 in file Startup.s.s
Comment: EMC_DYN_RRD_OFS used once
EMC_DYN_RRD_Val 00000001

Symbol: EMC_DYN_RRD_Val
   Definitions
      At line 566 in file Startup.s.s
   Uses
      At line 1217 in file Startup.s.s
Comment: EMC_DYN_RRD_Val used once
EMC_DYN_SREX_OFS 00000038

Symbol: EMC_DYN_SREX_OFS
   Definitions
      At line 391 in file Startup.s.s
   Uses
      At line 1204 in file Startup.s.s
Comment: EMC_DYN_SREX_OFS used once
EMC_DYN_SREX_Val 00000007

Symbol: EMC_DYN_SREX_Val
   Definitions
      At line 559 in file Startup.s.s
   Uses
      At line 1203 in file Startup.s.s
Comment: EMC_DYN_SREX_Val used once
EMC_DYN_WR_OFS 00000044

Symbol: EMC_DYN_WR_OFS
   Definitions
      At line 394 in file Startup.s.s
   Uses
      At line 1210 in file Startup.s.s
Comment: EMC_DYN_WR_OFS used once
EMC_DYN_WR_Val 00000001

Symbol: EMC_DYN_WR_Val
   Definitions
      At line 562 in file Startup.s.s
   Uses
      At line 1209 in file Startup.s.s
Comment: EMC_DYN_WR_Val used once
EMC_DYN_XSR_OFS 00000050

Symbol: EMC_DYN_XSR_OFS
   Definitions
      At line 397 in file Startup.s.s
   Uses
      At line 1216 in file Startup.s.s
Comment: EMC_DYN_XSR_OFS used once
EMC_DYN_XSR_Val 00000007

Symbol: EMC_DYN_XSR_Val
   Definitions



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Absolute symbols

      At line 565 in file Startup.s.s
   Uses
      At line 1215 in file Startup.s.s
Comment: EMC_DYN_XSR_Val used once
EMC_PCONP_Const 00000800

Symbol: EMC_PCONP_Const
   Definitions
      At line 445 in file Startup.s.s
   Uses
      At line 1174 in file Startup.s.s
Comment: EMC_PCONP_Const used once
EMC_PINSEL5_Val 55010115

Symbol: EMC_PINSEL5_Val
   Definitions
      At line 449 in file Startup.s.s
   Uses
      At line 1185 in file Startup.s.s
Comment: EMC_PINSEL5_Val used once
EMC_PINSEL6_Val 55555555

Symbol: EMC_PINSEL6_Val
   Definitions
      At line 450 in file Startup.s.s
   Uses
      At line 1187 in file Startup.s.s
Comment: EMC_PINSEL6_Val used once
EMC_PINSEL7_Val 55555555

Symbol: EMC_PINSEL7_Val
   Definitions
      At line 451 in file Startup.s.s
   Uses
      At line 1189 in file Startup.s.s
Comment: EMC_PINSEL7_Val used once
EMC_PINSEL8_Val 55555555

Symbol: EMC_PINSEL8_Val
   Definitions
      At line 452 in file Startup.s.s
   Uses
      At line 1191 in file Startup.s.s
Comment: EMC_PINSEL8_Val used once
EMC_PINSEL9_Val 50055555

Symbol: EMC_PINSEL9_Val
   Definitions
      At line 453 in file Startup.s.s
   Uses
      At line 1193 in file Startup.s.s
Comment: EMC_PINSEL9_Val used once
EMC_SETUP 00000001

Symbol: EMC_SETUP
   Definitions
      At line 457 in file Startup.s.s
   Uses
      At line 1169 in file Startup.s.s



ARM Macro Assembler    Page 11 Alphabetic symbol ordering
Absolute symbols

Comment: EMC_SETUP used once
EMC_STACS0_SETUP 00000001

Symbol: EMC_STACS0_SETUP
   Definitions
      At line 762 in file Startup.s.s
   Uses
      At line 1377 in file Startup.s.s
Comment: EMC_STACS0_SETUP used once
EMC_STACS1_SETUP 00000000

Symbol: EMC_STACS1_SETUP
   Definitions
      At line 829 in file Startup.s.s
   Uses
      At line 1394 in file Startup.s.s
Comment: EMC_STACS1_SETUP used once
EMC_STACS2_SETUP 00000000

Symbol: EMC_STACS2_SETUP
   Definitions
      At line 896 in file Startup.s.s
   Uses
      At line 1411 in file Startup.s.s
Comment: EMC_STACS2_SETUP used once
EMC_STACS3_SETUP 00000000

Symbol: EMC_STACS3_SETUP
   Definitions
      At line 963 in file Startup.s.s
   Uses
      At line 1428 in file Startup.s.s
Comment: EMC_STACS3_SETUP used once
EMC_STATIC_SETUP 00000001

Symbol: EMC_STATIC_SETUP
   Definitions
      At line 758 in file Startup.s.s
   Uses
      At line 1371 in file Startup.s.s
Comment: EMC_STATIC_SETUP used once
EMC_STAT_OFS 00000004

Symbol: EMC_STAT_OFS
   Definitions
      At line 384 in file Startup.s.s
   Uses
      None
Comment: EMC_STAT_OFS unused
EMC_STA_CFG0_OFS 00000200

Symbol: EMC_STA_CFG0_OFS
   Definitions
      At line 408 in file Startup.s.s
   Uses
      At line 1379 in file Startup.s.s
Comment: EMC_STA_CFG0_OFS used once
EMC_STA_CFG0_Val 00000081




ARM Macro Assembler    Page 12 Alphabetic symbol ordering
Absolute symbols

Symbol: EMC_STA_CFG0_Val
   Definitions
      At line 781 in file Startup.s.s
   Uses
      At line 1378 in file Startup.s.s
Comment: EMC_STA_CFG0_Val used once
EMC_STA_CFG1_OFS 00000220

Symbol: EMC_STA_CFG1_OFS
   Definitions
      At line 415 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_CFG1_OFS unused
EMC_STA_CFG1_Val 00000000

Symbol: EMC_STA_CFG1_Val
   Definitions
      At line 848 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_CFG1_Val unused
EMC_STA_CFG2_OFS 00000240

Symbol: EMC_STA_CFG2_OFS
   Definitions
      At line 422 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_CFG2_OFS unused
EMC_STA_CFG2_Val 00000000

Symbol: EMC_STA_CFG2_Val
   Definitions
      At line 915 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_CFG2_Val unused
EMC_STA_CFG3_OFS 00000260

Symbol: EMC_STA_CFG3_OFS
   Definitions
      At line 429 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_CFG3_OFS unused
EMC_STA_CFG3_Val 00000000

Symbol: EMC_STA_CFG3_Val
   Definitions
      At line 982 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_CFG3_Val unused
EMC_STA_EXT_W_OFS 00000880

Symbol: EMC_STA_EXT_W_OFS
   Definitions
      At line 436 in file Startup.s.s



ARM Macro Assembler    Page 13 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 1450 in file Startup.s.s
Comment: EMC_STA_EXT_W_OFS used once
EMC_STA_EXT_W_Val 00000000

Symbol: EMC_STA_EXT_W_Val
   Definitions
      At line 1033 in file Startup.s.s
   Uses
      At line 1449 in file Startup.s.s
Comment: EMC_STA_EXT_W_Val used once
EMC_STA_WOEN0_OFS 00000208

Symbol: EMC_STA_WOEN0_OFS
   Definitions
      At line 410 in file Startup.s.s
   Uses
      At line 1383 in file Startup.s.s
Comment: EMC_STA_WOEN0_OFS used once
EMC_STA_WOEN0_Val 00000002

Symbol: EMC_STA_WOEN0_Val
   Definitions
      At line 795 in file Startup.s.s
   Uses
      At line 1382 in file Startup.s.s
Comment: EMC_STA_WOEN0_Val used once
EMC_STA_WOEN1_OFS 00000228

Symbol: EMC_STA_WOEN1_OFS
   Definitions
      At line 417 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WOEN1_OFS unused
EMC_STA_WOEN1_Val 00000000

Symbol: EMC_STA_WOEN1_Val
   Definitions
      At line 862 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WOEN1_Val unused
EMC_STA_WOEN2_OFS 00000248

Symbol: EMC_STA_WOEN2_OFS
   Definitions
      At line 424 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WOEN2_OFS unused
EMC_STA_WOEN2_Val 00000000

Symbol: EMC_STA_WOEN2_Val
   Definitions
      At line 929 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WOEN2_Val unused



ARM Macro Assembler    Page 14 Alphabetic symbol ordering
Absolute symbols

EMC_STA_WOEN3_OFS 00000268

Symbol: EMC_STA_WOEN3_OFS
   Definitions
      At line 431 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WOEN3_OFS unused
EMC_STA_WOEN3_Val 00000000

Symbol: EMC_STA_WOEN3_Val
   Definitions
      At line 996 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WOEN3_Val unused
EMC_STA_WPAGE0_OFS 00000210

Symbol: EMC_STA_WPAGE0_OFS
   Definitions
      At line 412 in file Startup.s.s
   Uses
      At line 1387 in file Startup.s.s
Comment: EMC_STA_WPAGE0_OFS used once
EMC_STA_WPAGE0_Val 0000001F

Symbol: EMC_STA_WPAGE0_Val
   Definitions
      At line 809 in file Startup.s.s
   Uses
      At line 1386 in file Startup.s.s
Comment: EMC_STA_WPAGE0_Val used once
EMC_STA_WPAGE1_OFS 00000230

Symbol: EMC_STA_WPAGE1_OFS
   Definitions
      At line 419 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WPAGE1_OFS unused
EMC_STA_WPAGE1_Val 0000001F

Symbol: EMC_STA_WPAGE1_Val
   Definitions
      At line 876 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WPAGE1_Val unused
EMC_STA_WPAGE2_OFS 00000250

Symbol: EMC_STA_WPAGE2_OFS
   Definitions
      At line 426 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WPAGE2_OFS unused
EMC_STA_WPAGE2_Val 0000001F

Symbol: EMC_STA_WPAGE2_Val



ARM Macro Assembler    Page 15 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 943 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WPAGE2_Val unused
EMC_STA_WPAGE3_OFS 00000270

Symbol: EMC_STA_WPAGE3_OFS
   Definitions
      At line 433 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WPAGE3_OFS unused
EMC_STA_WPAGE3_Val 0000001F

Symbol: EMC_STA_WPAGE3_Val
   Definitions
      At line 1010 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WPAGE3_Val unused
EMC_STA_WRD0_OFS 0000020C

Symbol: EMC_STA_WRD0_OFS
   Definitions
      At line 411 in file Startup.s.s
   Uses
      At line 1385 in file Startup.s.s
Comment: EMC_STA_WRD0_OFS used once
EMC_STA_WRD0_Val 0000001F

Symbol: EMC_STA_WRD0_Val
   Definitions
      At line 802 in file Startup.s.s
   Uses
      At line 1384 in file Startup.s.s
Comment: EMC_STA_WRD0_Val used once
EMC_STA_WRD1_OFS 0000022C

Symbol: EMC_STA_WRD1_OFS
   Definitions
      At line 418 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WRD1_OFS unused
EMC_STA_WRD1_Val 0000001F

Symbol: EMC_STA_WRD1_Val
   Definitions
      At line 869 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WRD1_Val unused
EMC_STA_WRD2_OFS 0000024C

Symbol: EMC_STA_WRD2_OFS
   Definitions
      At line 425 in file Startup.s.s
   Uses



ARM Macro Assembler    Page 16 Alphabetic symbol ordering
Absolute symbols

      None
Comment: EMC_STA_WRD2_OFS unused
EMC_STA_WRD2_Val 0000001F

Symbol: EMC_STA_WRD2_Val
   Definitions
      At line 936 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WRD2_Val unused
EMC_STA_WRD3_OFS 0000026C

Symbol: EMC_STA_WRD3_OFS
   Definitions
      At line 432 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WRD3_OFS unused
EMC_STA_WRD3_Val 0000001F

Symbol: EMC_STA_WRD3_Val
   Definitions
      At line 1003 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WRD3_Val unused
EMC_STA_WTURN0_OFS 00000218

Symbol: EMC_STA_WTURN0_OFS
   Definitions
      At line 414 in file Startup.s.s
   Uses
      At line 1391 in file Startup.s.s
Comment: EMC_STA_WTURN0_OFS used once
EMC_STA_WTURN0_Val 0000000F

Symbol: EMC_STA_WTURN0_Val
   Definitions
      At line 823 in file Startup.s.s
   Uses
      At line 1390 in file Startup.s.s
Comment: EMC_STA_WTURN0_Val used once
EMC_STA_WTURN1_OFS 00000238

Symbol: EMC_STA_WTURN1_OFS
   Definitions
      At line 421 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WTURN1_OFS unused
EMC_STA_WTURN1_Val 0000000F

Symbol: EMC_STA_WTURN1_Val
   Definitions
      At line 890 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WTURN1_Val unused
EMC_STA_WTURN2_OFS 00000258



ARM Macro Assembler    Page 17 Alphabetic symbol ordering
Absolute symbols


Symbol: EMC_STA_WTURN2_OFS
   Definitions
      At line 428 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WTURN2_OFS unused
EMC_STA_WTURN2_Val 0000000F

Symbol: EMC_STA_WTURN2_Val
   Definitions
      At line 957 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WTURN2_Val unused
EMC_STA_WTURN3_OFS 00000278

Symbol: EMC_STA_WTURN3_OFS
   Definitions
      At line 435 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WTURN3_OFS unused
EMC_STA_WTURN3_Val 0000000F

Symbol: EMC_STA_WTURN3_Val
   Definitions
      At line 1024 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WTURN3_Val unused
EMC_STA_WWEN0_OFS 00000204

Symbol: EMC_STA_WWEN0_OFS
   Definitions
      At line 409 in file Startup.s.s
   Uses
      At line 1381 in file Startup.s.s
Comment: EMC_STA_WWEN0_OFS used once
EMC_STA_WWEN0_Val 00000002

Symbol: EMC_STA_WWEN0_Val
   Definitions
      At line 788 in file Startup.s.s
   Uses
      At line 1380 in file Startup.s.s
Comment: EMC_STA_WWEN0_Val used once
EMC_STA_WWEN1_OFS 00000224

Symbol: EMC_STA_WWEN1_OFS
   Definitions
      At line 416 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WWEN1_OFS unused
EMC_STA_WWEN1_Val 00000000

Symbol: EMC_STA_WWEN1_Val
   Definitions



ARM Macro Assembler    Page 18 Alphabetic symbol ordering
Absolute symbols

      At line 855 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WWEN1_Val unused
EMC_STA_WWEN2_OFS 00000244

Symbol: EMC_STA_WWEN2_OFS
   Definitions
      At line 423 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WWEN2_OFS unused
EMC_STA_WWEN2_Val 00000000

Symbol: EMC_STA_WWEN2_Val
   Definitions
      At line 922 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WWEN2_Val unused
EMC_STA_WWEN3_OFS 00000264

Symbol: EMC_STA_WWEN3_OFS
   Definitions
      At line 430 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WWEN3_OFS unused
EMC_STA_WWEN3_Val 00000000

Symbol: EMC_STA_WWEN3_Val
   Definitions
      At line 989 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WWEN3_Val unused
EMC_STA_WWR0_OFS 00000214

Symbol: EMC_STA_WWR0_OFS
   Definitions
      At line 413 in file Startup.s.s
   Uses
      At line 1389 in file Startup.s.s
Comment: EMC_STA_WWR0_OFS used once
EMC_STA_WWR0_Val 0000001F

Symbol: EMC_STA_WWR0_Val
   Definitions
      At line 816 in file Startup.s.s
   Uses
      At line 1388 in file Startup.s.s
Comment: EMC_STA_WWR0_Val used once
EMC_STA_WWR1_OFS 00000234

Symbol: EMC_STA_WWR1_OFS
   Definitions
      At line 420 in file Startup.s.s
   Uses
      None



ARM Macro Assembler    Page 19 Alphabetic symbol ordering
Absolute symbols

Comment: EMC_STA_WWR1_OFS unused
EMC_STA_WWR1_Val 0000001F

Symbol: EMC_STA_WWR1_Val
   Definitions
      At line 883 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WWR1_Val unused
EMC_STA_WWR2_OFS 00000254

Symbol: EMC_STA_WWR2_OFS
   Definitions
      At line 427 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WWR2_OFS unused
EMC_STA_WWR2_Val 0000001F

Symbol: EMC_STA_WWR2_Val
   Definitions
      At line 950 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WWR2_Val unused
EMC_STA_WWR3_OFS 00000274

Symbol: EMC_STA_WWR3_OFS
   Definitions
      At line 434 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WWR3_OFS unused
EMC_STA_WWR3_Val 0000001F

Symbol: EMC_STA_WWR3_Val
   Definitions
      At line 1017 in file Startup.s.s
   Uses
      None
Comment: EMC_STA_WWR3_Val unused
EXTMEM_BASE 80000000

Symbol: EXTMEM_BASE
   Definitions
      At line 62 in file Startup.s.s
   Uses
      None
Comment: EXTMEM_BASE unused
FIQ_Stack_Size 00000000

Symbol: FIQ_Stack_Size
   Definitions
      At line 89 in file Startup.s.s
   Uses
      At line 94 in file Startup.s.s
      At line 1504 in file Startup.s.s

FLASH_BASE 00000000



ARM Macro Assembler    Page 20 Alphabetic symbol ordering
Absolute symbols


Symbol: FLASH_BASE
   Definitions
      At line 60 in file Startup.s.s
   Uses
      None
Comment: FLASH_BASE unused
F_Bit 00000040

Symbol: F_Bit
   Definitions
      At line 54 in file Startup.s.s
   Uses
      At line 1492 in file Startup.s.s
      At line 1497 in file Startup.s.s
      At line 1502 in file Startup.s.s
      At line 1507 in file Startup.s.s
      At line 1512 in file Startup.s.s

Heap_Size 00000100

Symbol: Heap_Size
   Definitions
      At line 108 in file Startup.s.s
   Uses
      At line 112 in file Startup.s.s
      At line 1551 in file Startup.s.s

IRQ_Stack_Size 00000100

Symbol: IRQ_Stack_Size
   Definitions
      At line 90 in file Startup.s.s
   Uses
      At line 94 in file Startup.s.s
      At line 1509 in file Startup.s.s

ISR_Stack_Size 00000108

Symbol: ISR_Stack_Size
   Definitions
      At line 94 in file Startup.s.s
   Uses
      At line 99 in file Startup.s.s
Comment: ISR_Stack_Size used once
I_Bit 00000080

Symbol: I_Bit
   Definitions
      At line 53 in file Startup.s.s
   Uses
      At line 1492 in file Startup.s.s
      At line 1497 in file Startup.s.s
      At line 1502 in file Startup.s.s
      At line 1507 in file Startup.s.s
      At line 1512 in file Startup.s.s

MAMCR_OFS 00000000




ARM Macro Assembler    Page 21 Alphabetic symbol ordering
Absolute symbols

Symbol: MAMCR_OFS
   Definitions
      At line 344 in file Startup.s.s
   Uses
      At line 1163 in file Startup.s.s
Comment: MAMCR_OFS used once
MAMCR_Val 00000002

Symbol: MAMCR_Val
   Definitions
      At line 359 in file Startup.s.s
   Uses
      At line 1162 in file Startup.s.s
Comment: MAMCR_Val used once
MAMTIM_OFS 00000004

Symbol: MAMTIM_OFS
   Definitions
      At line 345 in file Startup.s.s
   Uses
      At line 1161 in file Startup.s.s
Comment: MAMTIM_OFS used once
MAMTIM_Val 00000004

Symbol: MAMTIM_Val
   Definitions
      At line 360 in file Startup.s.s
   Uses
      At line 1160 in file Startup.s.s
Comment: MAMTIM_Val used once
MAM_BASE E01FC000

Symbol: MAM_BASE
   Definitions
      At line 343 in file Startup.s.s
   Uses
      At line 1159 in file Startup.s.s
Comment: MAM_BASE used once
MAM_SETUP 00000001

Symbol: MAM_SETUP
   Definitions
      At line 358 in file Startup.s.s
   Uses
      At line 1158 in file Startup.s.s
Comment: MAM_SETUP used once
MEMMAP E01FC040

Symbol: MEMMAP
   Definitions
      At line 1473 in file Startup.s.s
   Uses
      None
Comment: MEMMAP unused
MODE_CMD 00000080

Symbol: MODE_CMD
   Definitions
      At line 440 in file Startup.s.s



ARM Macro Assembler    Page 22 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 1282 in file Startup.s.s
Comment: MODE_CMD used once
Mode_ABT 00000017

Symbol: Mode_ABT
   Definitions
      At line 49 in file Startup.s.s
   Uses
      At line 1497 in file Startup.s.s
Comment: Mode_ABT used once
Mode_FIQ 00000011

Symbol: Mode_FIQ
   Definitions
      At line 46 in file Startup.s.s
   Uses
      At line 1502 in file Startup.s.s
Comment: Mode_FIQ used once
Mode_IRQ 00000012

Symbol: Mode_IRQ
   Definitions
      At line 47 in file Startup.s.s
   Uses
      At line 1507 in file Startup.s.s
Comment: Mode_IRQ used once
Mode_SVC 00000013

Symbol: Mode_SVC
   Definitions
      At line 48 in file Startup.s.s
   Uses
      At line 1512 in file Startup.s.s
Comment: Mode_SVC used once
Mode_SYS 0000001F

Symbol: Mode_SYS
   Definitions
      At line 51 in file Startup.s.s
   Uses
      None
Comment: Mode_SYS unused
Mode_UND 0000001B

Symbol: Mode_UND
   Definitions
      At line 50 in file Startup.s.s
   Uses
      At line 1492 in file Startup.s.s
Comment: Mode_UND used once
Mode_USR 00000010

Symbol: Mode_USR
   Definitions
      At line 45 in file Startup.s.s
   Uses
      At line 1517 in file Startup.s.s
Comment: Mode_USR used once



ARM Macro Assembler    Page 23 Alphabetic symbol ordering
Absolute symbols

NOP_CMD 00000180

Symbol: NOP_CMD
   Definitions
      At line 442 in file Startup.s.s
   Uses
      At line 1262 in file Startup.s.s
Comment: NOP_CMD used once
NORMAL_CMD 00000000

Symbol: NORMAL_CMD
   Definitions
      At line 439 in file Startup.s.s
   Uses
      At line 1343 in file Startup.s.s
Comment: NORMAL_CMD used once
OSCEN 00000020

Symbol: OSCEN
   Definitions
      At line 136 in file Startup.s.s
   Uses
      At line 1098 in file Startup.s.s
Comment: OSCEN used once
OSCRANGE 00000010

Symbol: OSCRANGE
   Definitions
      At line 135 in file Startup.s.s
   Uses
      None
Comment: OSCRANGE unused
OSCSTAT 00000040

Symbol: OSCSTAT
   Definitions
      At line 137 in file Startup.s.s
   Uses
      None
Comment: OSCSTAT unused
PALL_CMD 00000100

Symbol: PALL_CMD
   Definitions
      At line 441 in file Startup.s.s
   Uses
      At line 1269 in file Startup.s.s
Comment: PALL_CMD used once
PCB_BASE E002C000

Symbol: PCB_BASE
   Definitions
      At line 365 in file Startup.s.s
   Uses
      At line 1172 in file Startup.s.s
Comment: PCB_BASE used once
PCLKSEL0_OFS 000001A8

Symbol: PCLKSEL0_OFS



ARM Macro Assembler    Page 24 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 128 in file Startup.s.s
   Uses
      At line 1144 in file Startup.s.s
Comment: PCLKSEL0_OFS used once
PCLKSEL0_Val 00000000

Symbol: PCLKSEL0_Val
   Definitions
      At line 337 in file Startup.s.s
   Uses
      At line 1143 in file Startup.s.s
Comment: PCLKSEL0_Val used once
PCLKSEL1_OFS 000001AC

Symbol: PCLKSEL1_OFS
   Definitions
      At line 129 in file Startup.s.s
   Uses
      At line 1146 in file Startup.s.s
Comment: PCLKSEL1_OFS used once
PCLKSEL1_Val 00000000

Symbol: PCLKSEL1_Val
   Definitions
      At line 338 in file Startup.s.s
   Uses
      At line 1145 in file Startup.s.s
Comment: PCLKSEL1_Val used once
PCONP_OFS 000000C4

Symbol: PCONP_OFS
   Definitions
      At line 132 in file Startup.s.s
   Uses
      At line 1175 in file Startup.s.s
      At line 1177 in file Startup.s.s

PCON_OFS 000000C0

Symbol: PCON_OFS
   Definitions
      At line 131 in file Startup.s.s
   Uses
      None
Comment: PCON_OFS unused
PINSEL0_OFS 00000000

Symbol: PINSEL0_OFS
   Definitions
      At line 366 in file Startup.s.s
   Uses
      None
Comment: PINSEL0_OFS unused
PINSEL10_OFS 00000028

Symbol: PINSEL10_OFS
   Definitions
      At line 376 in file Startup.s.s



ARM Macro Assembler    Page 25 Alphabetic symbol ordering
Absolute symbols

   Uses
      None
Comment: PINSEL10_OFS unused
PINSEL1_OFS 00000004

Symbol: PINSEL1_OFS
   Definitions
      At line 367 in file Startup.s.s
   Uses
      None
Comment: PINSEL1_OFS unused
PINSEL2_OFS 00000008

Symbol: PINSEL2_OFS
   Definitions
      At line 368 in file Startup.s.s
   Uses
      None
Comment: PINSEL2_OFS unused
PINSEL3_OFS 0000000C

Symbol: PINSEL3_OFS
   Definitions
      At line 369 in file Startup.s.s
   Uses
      None
Comment: PINSEL3_OFS unused
PINSEL4_OFS 00000010

Symbol: PINSEL4_OFS
   Definitions
      At line 370 in file Startup.s.s
   Uses
      None
Comment: PINSEL4_OFS unused
PINSEL5_OFS 00000014

Symbol: PINSEL5_OFS
   Definitions
      At line 371 in file Startup.s.s
   Uses
      At line 1186 in file Startup.s.s
Comment: PINSEL5_OFS used once
PINSEL6_OFS 00000018

Symbol: PINSEL6_OFS
   Definitions
      At line 372 in file Startup.s.s
   Uses
      At line 1188 in file Startup.s.s
Comment: PINSEL6_OFS used once
PINSEL7_OFS 0000001C

Symbol: PINSEL7_OFS
   Definitions
      At line 373 in file Startup.s.s
   Uses
      At line 1190 in file Startup.s.s
Comment: PINSEL7_OFS used once



ARM Macro Assembler    Page 26 Alphabetic symbol ordering
Absolute symbols

PINSEL8_OFS 00000020

Symbol: PINSEL8_OFS
   Definitions
      At line 374 in file Startup.s.s
   Uses
      At line 1192 in file Startup.s.s
Comment: PINSEL8_OFS used once
PINSEL9_OFS 00000024

Symbol: PINSEL9_OFS
   Definitions
      At line 375 in file Startup.s.s
   Uses
      At line 1194 in file Startup.s.s
Comment: PINSEL9_OFS used once
PLLCFG_OFS 00000084

Symbol: PLLCFG_OFS
   Definitions
      At line 121 in file Startup.s.s
   Uses
      At line 1107 in file Startup.s.s
Comment: PLLCFG_OFS used once
PLLCFG_Val 0000002F

Symbol: PLLCFG_Val
   Definitions
      At line 334 in file Startup.s.s
   Uses
      At line 1106 in file Startup.s.s
      At line 1130 in file Startup.s.s

PLLCON_OFS 00000080

Symbol: PLLCON_OFS
   Definitions
      At line 120 in file Startup.s.s
   Uses
      At line 1111 in file Startup.s.s
      At line 1150 in file Startup.s.s

PLLCON_PLLC 00000002

Symbol: PLLCON_PLLC
   Definitions
      At line 139 in file Startup.s.s
   Uses
      At line 1149 in file Startup.s.s
Comment: PLLCON_PLLC used once
PLLCON_PLLE 00000001

Symbol: PLLCON_PLLE
   Definitions
      At line 138 in file Startup.s.s
   Uses
      At line 1110 in file Startup.s.s
      At line 1149 in file Startup.s.s




ARM Macro Assembler    Page 27 Alphabetic symbol ordering
Absolute symbols

PLLFEED_OFS 0000008C

Symbol: PLLFEED_OFS
   Definitions
      At line 123 in file Startup.s.s
   Uses
      At line 1108 in file Startup.s.s
      At line 1109 in file Startup.s.s
      At line 1112 in file Startup.s.s
      At line 1113 in file Startup.s.s
      At line 1151 in file Startup.s.s
      At line 1152 in file Startup.s.s

PLLSTAT_M 00007FFF

Symbol: PLLSTAT_M
   Definitions
      At line 140 in file Startup.s.s
   Uses
      At line 1128 in file Startup.s.s
Comment: PLLSTAT_M used once
PLLSTAT_N 00FF0000

Symbol: PLLSTAT_N
   Definitions
      At line 141 in file Startup.s.s
   Uses
      At line 1128 in file Startup.s.s
Comment: PLLSTAT_N used once
PLLSTAT_OFS 00000088

Symbol: PLLSTAT_OFS
   Definitions
      At line 122 in file Startup.s.s
   Uses
      At line 1117 in file Startup.s.s
      At line 1127 in file Startup.s.s

PLLSTAT_PLOCK 04000000

Symbol: PLLSTAT_PLOCK
   Definitions
      At line 142 in file Startup.s.s
   Uses
      At line 1118 in file Startup.s.s
Comment: PLLSTAT_PLOCK used once
RAM_BASE 40000000

Symbol: RAM_BASE
   Definitions
      At line 61 in file Startup.s.s
   Uses
      None
Comment: RAM_BASE unused
SCB_BASE E01FC000

Symbol: SCB_BASE
   Definitions
      At line 119 in file Startup.s.s



ARM Macro Assembler    Page 28 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 1090 in file Startup.s.s
      At line 1171 in file Startup.s.s

SCS_OFS 000001A0

Symbol: SCS_OFS
   Definitions
      At line 127 in file Startup.s.s
   Uses
      At line 1096 in file Startup.s.s
Comment: SCS_OFS used once
SCS_Val 00000000

Symbol: SCS_Val
   Definitions
      At line 332 in file Startup.s.s
   Uses
      At line 1095 in file Startup.s.s
      At line 1098 in file Startup.s.s

STA_MEM0_BASE 80000000

Symbol: STA_MEM0_BASE
   Definitions
      At line 65 in file Startup.s.s
   Uses
      None
Comment: STA_MEM0_BASE unused
STA_MEM1_BASE 81000000

Symbol: STA_MEM1_BASE
   Definitions
      At line 66 in file Startup.s.s
   Uses
      None
Comment: STA_MEM1_BASE unused
STA_MEM2_BASE 82000000

Symbol: STA_MEM2_BASE
   Definitions
      At line 67 in file Startup.s.s
   Uses
      None
Comment: STA_MEM2_BASE unused
STA_MEM3_BASE 83000000

Symbol: STA_MEM3_BASE
   Definitions
      At line 68 in file Startup.s.s
   Uses
      None
Comment: STA_MEM3_BASE unused
SVC_Stack_Size 00000008

Symbol: SVC_Stack_Size
   Definitions
      At line 87 in file Startup.s.s
   Uses



ARM Macro Assembler    Page 29 Alphabetic symbol ordering
Absolute symbols

      At line 94 in file Startup.s.s
      At line 1514 in file Startup.s.s

UND_Stack_Size 00000000

Symbol: UND_Stack_Size
   Definitions
      At line 86 in file Startup.s.s
   Uses
      At line 94 in file Startup.s.s
      At line 1494 in file Startup.s.s

USBCLKCFG_OFS 00000108

Symbol: USBCLKCFG_OFS
   Definitions
      At line 125 in file Startup.s.s
   Uses
      At line 1140 in file Startup.s.s
Comment: USBCLKCFG_OFS used once
USBCLKCFG_Val 00000005

Symbol: USBCLKCFG_Val
   Definitions
      At line 336 in file Startup.s.s
   Uses
      At line 1139 in file Startup.s.s
Comment: USBCLKCFG_Val used once
USR_Stack_Size 00000400

Symbol: USR_Stack_Size
   Definitions
      At line 91 in file Startup.s.s
   Uses
      At line 98 in file Startup.s.s
      At line 1525 in file Startup.s.s
      At line 1550 in file Startup.s.s

205 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

__main 00000000

Symbol: __main
   Definitions
      At line 1531 in file Startup.s.s
   Uses
      At line 1532 in file Startup.s.s
Comment: __main used once
__use_two_region_memory 00000000

Symbol: __use_two_region_memory
   Definitions
      At line 1545 in file Startup.s.s
   Uses
      None
Comment: __use_two_region_memory unused
2 symbols
565 symbols in table
